day06回顾
              增删改查;

列表
    索引和切片
        取值 
            v = 列表[整数表达式]
            lst2 = 列表[开始:结束:步长]  #返回列表

        赋值
            列表[整数表达式] = v
            列表[开始:结束:步长] = 可迭代对象
del 语句
    del 列表[整数表达式]
    del 列表[开始:结束:步长]
函数:
    len(x)  max(x)  min(x)  sum(x)  any()  all(x)  
    reversed(x) 将可迭代对象反转,返回另一个可迭代对象
    sorted(x, reverse=False) 排序(默认为升序排序)

列表的方法:
    L.append(x)   #追加
    L.extend(可迭代对象)  #作用类似于L += (可迭代对象)
    L.count(x)
    L.copy(x)  浅拷贝
    L.remove(x)  删除
    L.pop(x)   移除(取出)返回取出来的数据
    L.clear()  清空
    L.inserst(索引,obj)  插入
    L.sort(reverse=False)  #对L列表进行排序
    L.reverse()    #反转

深拷贝于浅拷贝
    不拷贝:
        L2 = L1  两个变量同时绑定一个变量
    浅拷贝:
        L2 = L1.copy()  或  L2 = L1[::] 
    深拷贝:
        import copy
        L2 = copy.deepcopy(L1) 

文本解析的方法
    S.split(sep=None) 将字符串使用sep作用分隔符分隔S字符串,返回分隔后的字符串列表,当不给定参数时,用空白字符做分隔符
    S.splitlines(sep=None) 将字符串以行为单位分隔,形成分隔后的列表
    S.join(iterable) 用可迭代对象中的字符串,返回一个中间用S进行分隔的字符串

列表推导式:
    创建列表的表达式
    [表达式 for 变量 in 可迭代对象 if 真值表达式 ...]


day07 笔记:
元祖(tuple)
    1.元祖是不可改变的序列,同list一样,元祖可以存放任意类型的数据的容器
    2.可以认为,元组是不可变列表
元组的表示方式:
    用小括号()括起来,单个元素括起来后加(,)号区分元组还是单个元素
创建空元组:
        ()   #创建一个空元组
创建非空元组:
        t = 100,
        t = (200,)
        t = (1,2,3)
        t = 100,200,300
注:type(x)函数可以返回x的类型

元组的错误示例:
    t = (20)  t绑定20这个整数,不是元组
    x, y, z = 100,200,300   #序列赋值,不是元组
    x, y, z = (100,200,300) #序列赋值,不是元组
    x, y, z = [100,200,300] #序列赋值,不是元组
    x, y, z = "ABC"         #序列赋值,不是元组
    x, y = y, x

元组的构造函数:
    tuple()  生成一个空的元组,等同于()
    tuple(iterable)  用可迭代对象生成一个元组

    示例:
        t = tuple()
        t = tuple("ABC")
        t = tuple(range(1,10,3))
        t = tuple([2,3,5,7])

元组是可迭代对象
    t = tuple("ABC")
    for x in t:
        print(x)
    L = [x for x in t]

元组的运算:
    算数运算:
    + += * *= 
    用法等同于字符串的算数运算
    如:
        t = (1,2,3) + (4,5,6)  元组只能加元组,在末尾追加
        t += (7,8,9)  #注:此外t绑定的对象ID会变化
        t = (1,2,3)*2   #(1, 2, 3, 1, 2, 3)
        t *= 3    #(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)

元组的in/not in运算符
    判断一个值是否存在于元组中,如果存在返回True,否则返回False(与列表的in/not in功能相同))
    索引 index
        用法等同于列表的索引
        注:元组不支持索引赋值
    切片:
        用法与列表相同
        元组的切片返回一个新的元组
        元组不能切片赋值

元组的方法:
    T.index(v[,begin[,end]])  返回对应元素的索引下标,begin为开始索引,end为结束索引,当v不存在时会触发ValueError类型错误!
    T.count(x)   返回元组中对应deepcopy元素个数

练习:
    生成一个1~9的整数的平方的元组,元组如下:
        (1,4,9,16...81)
    t = tuple([x**2 for x in range(1,10)])

    t = ()
    for x in range(1,10):
        t += (x**2,)
    print(x)

三种序列小结
    str    不可变
    tuple  不可变
    list   可变
    都是容器

能用于序列的函数总结:
    len(x)  max(x)  min(x)  sum(x)  any(x)  all(x)
    all("")  一直为True
    构造函数:
        str(x)  tuple(x)  list(x)
    reversed(x) , sorted(x, reverse=False)

字典 dict
    什么是字典
        1.字典是一种可变容器,可以存储任意类型的数据 
        2.字典中每一个数据都是用"键"(key) 进行索引,而不像序列(字符串,列表等)可以用整数下标进行索引
        3.字典内的数据没有先后顺序关系,字典的存储是无序的
        4.字典中的数据以键(key)-值(value)对的形式进行映射存储
        5.字典的键不能重复,且只能用不可变类型作为字典的键

字典的字面值表示方式:
    字典是以{}括起来的,以(:)号分隔键值对,各键值之间用(,)分隔
    创建空字典:
        d = {}
    创建非空字典:
        d = {'姓名':'tarena', '年龄':'15'}
        d = {1:"一",2:"二",3:"三"}
        d = {1:"one",2:"Two",3:"Three"}
        d = {'a':{'b':100,'c':200}}
        d = {'name':None}
        d = {tuple(range(4)):list(range(4))}   #{(0, 1, 2, 3): [0, 1, 2, 3]}
        d = {1:'壹',2:'贰',5:'伍',1:'一'}   #{1: '一', 2: '贰', 5: '伍'}保留后一个

字典的构造函数:
    dict()    #创建一个空的字典 等同于{}
    dict(iterable) #用可迭代对象初始化一个字典
    dict(**kwargs) #用关键字传参生成一个字典
示例:
    d = dict()  #d = {}
    L = [(1,2),[3,4],"AB"]
    d = dict(L)     #d = {1:2,3:4,'A':'B'}  #两两配对
    d = dict(name = 'tarena', age = 15,address='北京')
    注:关键字传参时,关键字的名字必须是符合标识符命名规则的字符串

字典的键(key)必须是不可变类型:
    bool, int, float, complex, str, tuple, frozenset, bytes, None对象
可变的数据类型:
    list, dict, set, bytearry(字节数组)

字典的键索引:
    用[]运算符可以获得字典内"键"对应的值
    语法:
        v = 字典[键]
    示例:
        d = {'name':'tarena','age':20}
        print(d['name'], '今年', d['age'], '岁')    #tarena 今年 20 岁
    
添加和修改字典的元素
    语法:
        字典[键] = 值
    说明:
        如果键不存在,创建键,并绑定键对应的值
        键存在, 修改键绑定的值
    示例:
        d = {}
        d['name'] = 'tarena'  #创建'name'键,对应'tarena'
        d['age'] = 15         #创建'age'键,绑定为15
        d['age'] = 16         #修改'age'键,绑定为16
        print(d)

del 语句
    删除字典的键,同时解除与值的绑定关系
    语法:
        del 字典[键]
    示例: 
        d = {'name':'tarena', 'age':20}
        del d['name']   #删除name键,值的去向不明

字典的成员资格判断 in/not in 运算符
    可以用in运算符来判断一个键是否存在于字典中,如果存在则返回True,否则返回False(只判断键)
    not in与in的结果相反
    示例:
        d = {1:'一', 'aaa':'三个a'}
        1 in d    #True
        '一' in d #False
        2 not in d #True
        '三个a' not in d #True

练习:
    1.写程序,将如下信息形成一个字典 seasons
    '键'  '值' 
    1     春季有1,2,3月
    2     夏季有4,5,6月
    3     秋季有7,8,9月
    4     冬季有10,11,12月
    2.让=用户输入一个整数代表这个季度,打印这个季度的信息
       如果用户输入的信息不在字典内,则打印"信息不存在"

seasons = {1:"春季有1,2,3月",2:"夏季有4,5,6月",3:"秋季有7,8,9月",4:"冬季有10,11,12月"}
NO = int(input("请输入1~4的整数:"))
try:
    print(seasons[NO])
except KeyError as KE:
    print("输入的信息不对", KE)

字典的迭代访问
    字典是可迭代对象,字典只能对键进行访问
    示例: 
d = {'一':1,'二':2,'三':3}
for x in d:
    print(x)

字典的比较:
    == !=
    == 字典是否完全相同
    != 与 == 相反

可以用于字典的内建函数:(注意数字与字符串的区别)
    len()  返回字典的键值对的个数
    max()  返回字典的键的最大值
    min()  返回字典的键的最小值
    sum()  返回字典的所有键的和
    any()  真值测试,有一个键为真,返回True
    all()  真值测试,所有键为真,返回True

示例:
    d = {0:'零', 5:'伍', 8:'捌', 3:'叁'}
    len(d) #4
    max(d) #8
    min(d) #0
    sum(d) #16
    any(d) #True
    all(d) #False

字典的方法:
    D.clear() 	清空字典
    D.pop(key) 	移除键，同时返回此键所对应的值
    D.copy() 	返回字典D的副本,只复制一层(浅拷贝)
    D.update(D2) 	将字典 D2 合并到D中，如果键相同，则此键的值取D2的值作为新值
    D.get(key, default=None) 	返回键key所对应的值,如果没有此键，则返回default
    D.keys() 	返回可迭代的 dict_keys 集合对象
    D.values() 	返回可迭代的 dict_values 值对象
    D.items() 	返回可迭代的 dict_items 对象

示例:
    d1 = {1:'one', 2:'二', 3:'叁'}
    for t in d1.items():
        print(t)   #(1,'one') (2, '二') (3, '叁')

for 语句的语法:
    for 变量列表 in可迭代对象:
        语句
    for k, v in d1.items():
        print(k, v)

练习:
    输入一段字符串,打印出这个字符串出现过的字符及出现过的次数
    如:
        abcdabcaba
    打印:
        a: 4次
        b: 3次
        c: 2次
        d: 1次
    s = input("请输入:")
    #方法1
    d = {}
    for ch in s:
        d[ch] = s.count(ch)
    #方法2
    d = {}
    for ch in s:
        if ch in d:
            d[ch] += 1
        else:
            d[ch] = 1
    for t in d.items():
        print("%s:%d" %t)

s = 'abdcdkleivnefdsfxx'
d = {}
for ch in s:
    if ch in d:
        d[ch] += 1
    else:
        d[ch] = 1
d = sorted(d.items())
for t in d:
    print("%s:%d" %t[0:2])
print(d)

练习:
    写一个程序,输入一些单词和解释,将单词作为键,解释作为值,存于字典中,当输入单词为空时结束输入

vocabulary = {}
while True:
    danci = input("请输入一个单词:")
    if len(danci) == 0:
        print("输入结束")
        break
    else:
        jieshi = input("请输入单词的解释:")
        vocabulary[danci] = jieshi

while True:
    word = input("请输入要查询的单词:")
    if word == 'quit()':
        break
    try:
        print(word, ':', vocabulary[word])
    except KeyError as KE:
        print("暂无该单词:", KE)

字典推导式
    字典推导式是用可迭代对象依次生成字典内元素的表达式
    语法:
        {键表达式: 值表达式 for 变量 新可迭代对象 [if 真值表达式]}
        注:[]内的内容可以省略
    示例:
        生成一个字典,键为数字(1~9),值为键的平方
        d = {x: x**2 for x in range(1,10)}

练习:
    有如下字符串列表:
    L = ['tarena', 'xiaozhang', 'hello'}
    请生成如下字典:
    d = {'tarena':6, 'xiaozhang':9, 'hello':5}

L = ['tarena', 'xiaozhang', 'hello']
d = {id: len(id)  for id in L}
print(d)

练习:
    已知有两个等长的列表
    list1 = [1001, 1003, 1008, 1004]
    list2 = ['Tom', 'Jerry', 'Spike', 'Tyke']
    用list2中的元素作为键,用list1的元素作为值,生成如下字典
    {'Tyke': 1004, 'Tom': 1001, 'Spike': 1008, 'Jerry': 1003}

list1 = [1001, 1003, 1008, 1004]
list2 = ['Tom', 'Jerry', 'Spike', 'Tyke']
d = {k :list1[list2.index(k)] for k in list2} #字典推导式
print(d)


字典推导式的嵌套
    规则同列表推导式

字典 vs 列表
    1.都是可变对象
    2.索引的方式不同(列表用整数索引,字典用键索引)
    3.字典的插入,删除,修改的速度可能会快于列表(重要)
    4.列表的存储是有序的,字典的存储是无需的

练习:
    1.猴子一天吃一半桃子+1,第十天还剩一个桃子,一共摘了几个桃子

peach = 1    
for i in range(1,10):
    peach = (peach + 1) * 2
print("一共有",peach,"个桃子") 

    2.写程序,添加,删除,查找单词+退出

def Dict():
    while True:
        print("1) 添加单词")
        print("2) 删除单词")
        print("3) 查找单词")
        print("4) 退出")
        tip = input("请输入一个序号:")

        if tip == '1':
            add_word()
        elif tip == '1':
            del_word()
        elif tip == '1':
            show_word()
        elif tip == '1':
            break

def add_word():
    while True:
        word = input("请输入一个单词:")
        if len(word) == 0:
            print("输入结束")
            break
        else:
            trans = input("请输入单词的解释:")
            DICT[word] = trans
def del_word():
    while True:
        word = input("请输入要删除的单词:")
        if len(word) == 0:
            print("输入结束")
            break
        try:
            del DICT[word]
            print("操作成功!")
        except KeyError as KE:
            print("为找到单词:", KE)
            break
def show_word():
    while True:
        word = input("请输入要查询的单词:")
        if len(word) == 0:
            print("输入结束")
            break
        try:
            print(word, ':', DICT[word])
        except KeyError as KE:
            print("暂无该单词:", KE)
            break

if __name__ == '__main__':
    DICT = {}
    Dict()

    tip = input("请输入一个序号:")
    if tip == '1':
        add_word()
    elif tip == '1':
        del_word()
    elif tip == '1':
        show_word()
    elif tip == '1':
        break


    3.项目(学生信息管理)
        输入任意个学生的信息,形成字典后存入列表:
            学生信息:有姓名,年龄,成绩
        如:
            请输入姓名:tarena
            请输入年龄:15
            请输入成绩:99
            请输入姓名:name2
            请输入年龄:15
            请输入成绩:80
            请输入姓名:<回车>结束输入
        形成内部存储格式如下:
        infos = [{'name':'tarena','age':15,'score':99},...]
    #第二步以表格方式打印上述列表内容:
        +------+-------+-------+
        |姓名   | 年龄  | 成绩   |
        +------+-------+-------+
        |tarena|  15   | 99    |
        +------+-------+-------+

infos = []
while True:
    print("1) 添加同学")
    print("2) 删除同学")
    print("3) 修改同学")
    print("4) 显示同学")
    print("5) 退出")
    tip = input("请输入操作序号:")
    if tip == "1":
        while True:
            name = input("请输入学生姓名:")
            if len(name) == 0:
                break
            age = input("请输入学生年龄:")
            score = input("请输入学生成绩:")
            STUDENTS = {'name':name, 'age':age, 'score':score}
            infos.append(STUDENTS)
    elif tip == "2":
        pass
    elif tip == "3":
        pass
    elif tip == "4":
        print("+----------+----------+----------+")
        print("|   name   |    age   |   score  |")
        print("+----------+----------+----------+")
        for d in infos:
            n = d['name']
            a = d['age']
            s = d['score']
            print("|%s|%s|%s|" %(n.center(10),
                                a.center(10),
                                s.center(10)))
        print("+----------+----------+----------+")
    elif tip == "5":
        break