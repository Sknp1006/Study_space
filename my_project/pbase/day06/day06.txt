day05回顾
循环
 for 语句
    遍历可迭代对象
    语法: 
        for 变量列表 in 可迭代对象
            语句块1
        else:
            语句块2
可迭代对象:
    字符串 str
    列表 list
    range() 返回来的对象
        range(终止函数)
        range(开始函数,终止函数)
        range(开始函数,终止函数,步长)
        作用:用于创建一个整数序列的生产器

    continue:
        用于重新开始一次新的循环
        while a>b:
           .....
           continue:
               ....

列表容器
    可以存储任意数据的容器
    可变的序列
列表的创建
    字面值的创建方式
    [],[1,2.3,3],[1,2,[3,3,4,4],56]
    构造函数的方式
    list()
    list("ABC")
    list(range(1,10))
    list([1,2,3,4]))
列表的运算
    + ,+=, *, *=
    列表 += 可迭代对象(实现追加可迭代对象的数据)
列表的比较运算:
    < <= > >= == !=
    依次比较
    in ,not in运算符


day06笔记

列表的索引操作
    index
索引的语法:
    列表[整数表达式]
用法:
    等同于字符串的索引
    索引分为正向索引和反向索引,规则与字符串的规则相同
示例:
    L = [1,2,3,4]
    print(L[1])) #2
    print(L[-1]) #4
    print(L[-100]) #报错
    
列表的索引赋值:
    列表是可变的序列,可以通过索引赋值改变列表中的元素

    语法: 
        列表[整数表达式] = 表达式
    示例:
        L = [1,2,3,4,5]
        L[1] = 100
        print(L) #[1,100,3,4,5]
        L[-2] = 2
        print(L) #[1,2,3,2,5]
 列表的切片:
    列表[:]
    列表[::]
    列表的切片是从列表中取出相应的元素,重新组成一个新的列表
    列表的切片规则与字符串相同
示例:
    L = [0,1,2,4,5,6,78]
    L2 = L[1:6:2] #1,4,6
列表的切片赋值:
    作用:
        可以改变原列表的排序,可以插入,删除和修改数据
    语法:
        列表[切片slice] = 可迭代对象
    说明:
        赋值运算符的右侧必须是可迭代对象
    示例:
        L = [2,3.1,4.2,5]
        L[1:3] = [3,4] #L = [2,3,4,5]
        L[1:3] = [3.1415] #L = [2,3.1415,5]
        L[1:] = range(3,7) #2,3,4,5,6

        L = [2,4]
        L[1:1] = [3]   #[2,3,4]
        L[3:3] = [5,6] #[2,3,4,5,6]
        L[0:0] = 'AB'  #['A','B',2,3,4,5,6] #字符串是可迭代对象
        L[0:0] = ['AB']  #['AB','A','B',2,3,4,5,6]
        L[::] = [] #清空列表,不同于L = []
        L = [] #创建空列表,L放弃绑定原来的...
    注意事项:
        L = [1,2,3,4]
        L2 = L
        L = []
        print(L2)  # [1, 2, 3, 4]

        L = [1,2,3,4]
        L2 = L
        L[:] = []
        print(L2) # []
练习:
    已知有列表:
    L = [3,5]
    用索引和切片操作,将原列表改为:
    L = [1,2,3,4,5,6]
    将列表反转,删除最后一个元素后再打印列表
    ...
    print(L) #[6,5,4,3,2]

del语句
    用于删除列表中的元素
    语法:
        del 列表[索引]
        del 列表[切片]
    示例: 
        L = [1,3.14,2,100,3]
        del L[1] 
        del L[2]
        print(L) #[1, 2, 3]
    说明:
        列表中的元素被删除,后续的元素的索引值会变小,即后续元素前移
    
列表的切片操作的注意事项:
    对于步长不等于1的切片赋值, 赋值运算符右侧的可迭代对象提供的元素个数,一定要大于切片切出的个数
    如: 
        L = [1,2,3,4,5,6]    #字符串是可迭代对象

        L[::2] = 'ABC'   #对的
        L[::2] = 'ABCD'  #错的
    
python3中常用的序列函数:
   len(seq)   返回序列的长度
   max(x)     返回序列的最大值元素(要求每两个元素都能比较大小)
   min(x)     返回序列的最小值元素(要求每两个元素都能比较大小)
   sum()      返回序列中所有元素的和(要求都为数值类型元素)
   any()      真值测试,如果列表其中的一个值为真,则返回True
   all()      真值测试, 如果列表中所有元素都为真才返回True,否则False

示例: 
    L = [1,3.14,0,999999, 10]
    len(L)
    max(L)
    min(L)
    sum(L)  #1000013.14
    any(L)  #True
    all(L)  #False

序列相关的函数2
reversed(seq)    返回原序列的反向顺序的可迭代对象
sorted(iterable, reverse=False) 返回可迭代对象中排序后的对象列表

示例: 
    L = [5,9,7,1,3]
    for x in reversed(L):
        print(x) #3,1,7,9,5 
    L2 = sorted(L)
    L3 = sorted(L, reverse=True)  #[9, 7, 5, 3, 1]

练习: 
    输入一下正整数函数,存入一个列表L当中,当输入-1时结束输入
    1.打印出列表中存有的数字
    2.打印出输入的数字的最大值
    3.打印出输入的这些数字的平均值

python3中常用的列表方法(method)
    详见:>>>help(list)
    文档参见:
        python_base_docs_html/list.html

练习:
    写一个程序,让用户输入两个以上的正整数,当输入负数时结束输入
    (要求:限制用户,不允许出现重复的数)
    1.打印这些数的和
    2.打印这些数中最大的数
    3.打印这些数第二大的数
    4.删除最小的数

    如何保持原数据顺序不变,按原来的数打印剩下的数

深拷贝于浅拷贝
1.不拷贝
    L1 = [1,2,[3.1,3.2]]
    L2 = L1 #两个变量同时绑定在一个对象上
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L1)  #[1,2.2,[3.14,3.2]]
    print(L2)  #[1,2.2,[3.14,3.2]]
2.浅拷贝 shallow copy
    浅拷贝是指在复制的过程中,只复制一层变量,不会复制深层变量绑定的对象

示例:
    L1 = [1,2,[3.1,3.2]]
    L2 = L1.copy()
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L1)  #[1,2,[3.14,3.2]]
    print(L2)  #[1,2.2,[3.14,3.2]]
3.深拷贝
    是指复制过程中,复制所有变量以及变量关联的深层变量的绑定对象,实现两个对象完全独立
示例:
    import copy
    L1 = [1,2,[3.1,3.2]]
    L2 = copy.deepcopy(L1) #L2完全独立
    L2[1] = 2.2
    L2[2][0] = 3.14
    print(L1)  #[1,2,[3.1,3.2]]
    print(L2)  #[1,2.2,[3.14,3.2]]

思考:
    L1 = [1,2,"hello"]  #字符串不算深层结构
    L2 = L1.copy()
    import copy
    L3 = copy.deepcopy(L1)
    L2[2] += "!"
    L3[2] += "?"
    会影响到L1吗?
    L1 = [1, 2, 'hello']
    L2 = [1, 2, 'hello!']
    L3 = [1, 2, 'hello?']

列表和字符串比较
    列表和字符串都是序列,元素之间有先后顺序关系
    字符串是不可变序列,列表是可变序列
    字符串只能存储字符,而列表可以存储任意对象
    列表和字符串都是可迭代对象

    不可变数据类型:占用内存少,数据安全,但不能实现添加删除等操作
    可变数据类型:占用内存较多,可以实现灵活的增删改等操作

字符串文本的解析方法split,splitlines和join
S.split(sep=None) 将字符串使用sep作用分隔符分隔S字符串,返回分隔后的字符串列表,当不给定参数时,用空白字符做分隔符
S.splitlines(sep=None) 将字符串以行为单位分隔,形成分隔后的列表
S.join(iterable) 用可迭代对象中的字符串,返回一个中间用S进行分隔的字符串

示例:
    s = 'Beijing is capital'
    L = s.split(' ') #...
    s = 'a b c d\nABCD\n1234\n'
    L = s.splitlines() #...
    L2 = ['C:', 'Programe files', 'python3']
    L = '\\'.join(L2)

练习:
    有字符串"hello",生成字符串"h e l l o"和"h-e-l-l-o"
    答案:
        法1:
            L = list("hello")
            s1 = ' '.join(L)
            s2 = '-'.join(L)
        法2:
            s1 = ' '.join("hello")
            s2 = '-'.join("hello")

列表推导式 list comprehension
    列表推导式是用可迭代对象来创建的表达式
    作用:
        用简易方法创建列表
    语法:
        [表达式 for 变量 in 可迭代对象]
        [表达式 for 变量 in 可迭代对象 if 真值表达式]
    示例:
        生成一个数字1~9的整数平方的列表,即:
            L = [1, 4, 9, 16, 25, 36, 49, 64, 81]
            #[x**2 for x in range(1,10)]

            #L = []
             for x in range(1,10):
                 L.append(x**2)
             print(L)

练习:
    用列表推导式生成1~100内所有奇数的列表
    L = [x for x in range(1,101) if x%2==1]
    L = [x for x in range(1,101,2)]

列表推导式示例2
    生成数字1~9的奇数的平方的列表
    L = [x**2 for x in range(1,10,2)]]
    L = [x**2 for x in range(1,10) if x%2==1]

列表推导式的嵌套:
    [表达式1 
        for 变量1 in 可迭代对象1 if 真值表达式1
            for 变量2 in 可迭代对象2 if 真值表达式2
                for 变量3 in 可迭代对象3 if 真值表达式3
                    ]
    示例:
        L = [x+y for x in [10, 20, 30] for y in [1, 2, 3]]
        print(L)

练习:
    用字符串"ABC"和字符串"123"生成如下列表:
        ['A1','A2','A3','B1','B2','B3','C1','C2','C3']
        #L = [x+y for x in "ABC" for y in "123"]


练习:
    1.输入一个开始的整数,用begin绑定
    输入一个结束的整数,用end绑定
        将从begin开始,到end结束(不包含end)的偶数存于列表中,并打印此列表
        (建议用列表推导式实现)

begin = int(input("开始:"))
end = int(input("结束:"))
L = [x for x in range(begin,end+1) if x%2==0]
print(L)

    2.已知有字符串:
    s = '100,200,300,500,800'
    将其转化为列表列表的内部都为数字:
    L = [100,200,300,500,800]

s = '100,200,300,500,800'
L = []
S = s.split(',')
for i in S:
    L.append(int(i))
print(L)

#L = [int(x) for x in s]

    3.已知有一个列表中存有很多数,还有重复的,如:
    L = [1,2,3,4,5,5,3,........]
    1)将列表中出现的数字存于L2中
        要求:重复出现多次的数字只能在L2中保留一份(去重)

L = [1,3,5,1,4,5,2,3,5,6,5,6,6,68,7,9,7,5,90]
print(L)
L2 = []
L3 = []
L2 = list(set(L))
print(L2)

    2)将L列表中出现两次的数字存于另一个列表L3中,在L3中只保留一份

for i in L:
    if x not in L3 and L.count(i) == 2:
        L3.append(i)
print(L3)

    4.写程序,生成前40个斐波那契数(Fibonacci)
    1 1 2 3 5....
    要求:将这些数存于一个列表中,最后打印这些数
#1
f0 = 1
f1 = 1
L = [f0,f1]
while True:
    f2 = f0 + f1
    f0, f1 = f1, f2 
    if len(L) < 40:
        L.append(f2)
        continue
    else:
        break
print(L)
#2
a = 0
b = 1
L = []
while len(L) < 40:
    L.append(b)
    a, b = b, a+b
print(L)
#3
L = [1, 1]
while len(L) < 40:
    L.append(L[-1] + L[-2])
print(L)
 

and一旦前面的结果为False,忽视后面