day10回顾:
    全局变量
        一旦创建,不会自动销毁,需要用del语句销毁
    局部变量
        在函数调用时(过程中)创建,自动销毁
    globals
        返回全局变量的字典
    locals
        返回局部变量的字典
    函数变量
        函数名是变量,在创建时绑定一个'函数'
        函数可以作为形参传入另一函数
        函数还可以作为另一个函数的返回值
        函数嵌套定义
            def f1():
                def f2():
                    print("hello")
                return f2
            fx = f1()
            fx()
        示例2:
            def fn(fx):
                print("fn被调用")
                return fx
            m = fn(max)
            print(m(1,2,3))
    作用域:
        局部                    L
        外部嵌套函数作用域        E
        全局(模块内)             G
        内建(内置)函数作用域       B
    global 语句:
        声明为全局作用域
            global v
    nonlocal 语句
        声明为外部嵌套函数作用域
    
    lambda 表达式
        创建函数的表达式
        主要是用来创建简单函数
        lambda x, y : *args, **kwargs: x + y + sum(args)
    eval 函数:
        把字符串当成'表达式'来运行,返回表达式的运算结果
    exec 函数:
        把字符串当成python语言的程序来运行

day11笔记:
函数式编程 (function programming)
    函数式编程用一系列的函数解决问题
    说明:
        用每一个函数完成细小的功能,一系列函数任意组成可以解决大问题
        函数仅接受输入并产生输出,不包含任何能影响输出的内部状态
    示例见:
        day10_exercise/sum_1_100.py

函数的重入性:
    当一个函数没有访问除局部变量以外的变量,则此函数为可重如函数

    尽量少访问全局变量,因为会增加程序的偶合度
    特点:
        输入一定,结果必须一定
    示例:
        #以下为可重入函数
        def myadd(x, y):  #此函数没有访问全局或外部嵌套作用域函数的变量
            print(x + y)
        print(myadd(100, 200))
        #以下为不可重入函数
        s = 0
        def myadd(x, y):
            print(x + y + s)
        print(myadd(100, 200))  #300
        s = 10000
        print(myadd(100, 200))  #10300
    
高阶函数(High Order Function)
    什么是高阶函数?
        满足下列条件中之一的
        1.函数接受一个或多个参数的传入
        2.函数返回一个函数

python内建的高阶函数:
        map
        fliter
        sorted
map 函数:
    格式:
        map(function, iterable1, iterable2, ...)
    作用:
        用iterable1, iterable2中取出的数据用func处理后返回处理后的结果
    参数:
        func 数据处理函数
        iterable1, iterable2 可迭代对象
    返回值:
        可迭代对象
    示例:
        def power2(x):
            return x**2

        for x in map(power2, range(1, 10)):
            print(x)
    说明:
        func函数的形参列表的形参个数与map函数中可迭代对象的个数相关,一般func函数的个数
        等于map函数中可迭代对象的个数
    示例:
        生成一个可迭代对象,次可迭代对象可与生成1 ** 4, 2 ** 3, 3**2, 4**1
        for x in map(pow, [1,2,3,4], (4,3,2,1):
        print(x)

练习:
    求 1**2 + 2**2 + 3**2 + ... + ... + 9**2 的和
    求 1**3 + 2**3 + 3**3 + ... + ... + 9**3 的和
    求 1**9 + 2**8 + 3**7 + ... + ... + 9**1 的和

    print(sum(map(pow, range(1,10),9*(2,)))   #元组可以乘
    print(sum(map(pow, range(1,10),9*[3])))  #列表可以乘
    print(sum(map(pow, range(1,10),range(1,10)[::-1])))

filter 函数
格式:
    filter(func, iterable)
作用:
    创建一个可迭代对象,此可迭代对象将用func函数对iterable中的数据进行筛选
参数:
    func 筛选函数,有一个形参,通常返回True/False
    iterable 原始可迭代数据
返回值:
    可迭代对象
示例:
    def isodd(x):
        '''此函数判断x是否为奇数,如果奇数返回True'''
        return x % 2 == 1
    #打印1~10以内的所有奇数:
    for x in filter(isodd, range(10)):
        print(x)
    
    #生成10以内所有偶数的列表
    L = list(filter(lambda x:x%2==0, range(10)))
    print(L)

练习:
    用filter函数将1~100之间所有的素数prime存放于列表中

sorted 函数:
    作用:
        将原可迭代对象数据进行排序,生成排序后的列表
    格式:
        sorted(iterable, key=None, reverse=False)
    参数:
        iterable 可迭代对象
        key 函数,用来提供一个排序的依据值,默认用原值进行比较
            key函数传入的是要比较的数据对象,返回值为能比较的值
        reverse 标志用来设置是否降序排序
    返回值:
        排序后的列表
    示例:
        L = [5, -2, -4, 0, 3, 1]
        L2 = sorted(L)  #L2 = [-4, -2, 0, 1, 3, 5]
        L3 = sorted(L, reverse=True)  #[5, 3, 1, 0, -1, -4]
        L4 = =sorted(L, key=abs)
    
    key 函数额格式:
        def xxx(a[需要比较的数据]:
            return a的依据
    
    示例二:
        names = ['Tom', 'Jerry', 'Spike', 'Tyke']
        L1 = sorted(name)
        L2 = sorted(names, key=len)
        def fk(s):
            return s[::-1]
        L3 = sorted(names, key=fk)

练习:
    以下列表中的数据进行排序
        L = [(1,5),(3,9),(4,1),(3,6),(5,3)]
    1.将列表内的五个元组按第二个数据的从小到大的顺序进行排序
    (4,1) (5,3) (1,5) (3,6) (3,9)
    2.将列表内的五个元组按第二个数的从大到小顺序进行排序,打印排序后的结果
    3.假设元组中的数据是数学直角坐标系的坐标,则按他们距离原点的距离进行排序

 小结:
    三个高阶函数
        map函数(func, 可迭代对象1, 可迭代对象2)
            对一个或多个可迭代的数据处理
        filter(func, 可迭代对象)
            过滤
        sorted(可迭代对象, key=函数, reverse=False)
            排序

递归 Recursion
    递归是指函数直接或间接的调用自身
示意:
    def fn():
        fn()   #直接调用自身

    def fa():
        fb()
    def fb():
        fa()
    fa()        #间接调用自身

递归一定要控制递归的层数,当符合一定条件时要终止递归
几乎所有的递归都能用while循环代替
递归分为两个阶段:
    递推阶段:
        从原问题出发,按递归公式,从未知到已知,最终返回
    回归阶段
        按递归终止条件,逆向代入递归公式,回归到原来的问题求解

问题:
局部变量在说明时候会自动销毁?
    函数结束后才自动销毁(如果函数尚未结束,则局部变量不会销毁)
同一个函数能有几个同名的局部变量?    
    调用几次就有几个局部变量

示例见:
    recursion.py


练习:
    1.试写一个递归函数mysum(n), 此函数用递归方式求
    1+2+3+4+5+6+7+...+n的和
    def musum(n):
        ....#自己实现
        if n ==1 :
            return 1
        return n+mysum(n-1)
    print(mysum(100))

    2.已知有五位朋友在一起:
        第五个人说他比第四个人大2岁
        第四个人说他比第三个人大2岁
        第三个人说他比第二个人大2岁
        第二个人说他比第一个人大2岁
        第一个人说他10岁
        写函数get_age(n),求第三个人几岁,第五个人几岁
        def get_age(n):
            if n == 1:
                return  10
            return get_age(n-1)+2
            
        print(get_age(3))
        print(get_age(5))

递归的优缺点:
    #递归一定要控制递归的层数,当符合某一条件时要终止递归
    优点:  递归可以把问题简单化,让思路更清晰,代码更简洁
    缺点:  递归因系统环境影响大,当递归深度太大时,可能会得到不可预知的结果

闭包 closure:
    说明是闭包:
        闭包是指引用了此函数外部嵌套函数的变量函数
闭包必须满足三个条件:
    1.必须有一个内嵌函数
    2.内嵌函数必须引用外部函数中的变量
    3.外部函数返回值必须是嵌套函数

思考:
    全局变量和局部变量的区别?
        全局变量
            一直存在,谁都可以访问和修改
        局部变量
            只是在调用时存在,只能在函数内部进行访问和修改

示例见:
    closure1.py

闭包的优缺点:
    优点:
       加强封装性,用内部嵌套函数可以使函数外的变量而不被破坏
    缺点:
        由于闭包会使函数中的变量都被保存在内存中,内存消耗量大,所以不能乱用闭包
    
练习:
    1.已知有列表:
        L = [[3, 5, 8], 10, [[13, 14]], 15, 18]
        1)写一个函数print_list(lst)  打印出所有的数字
        如:
            print_list(lst)  #打印3,5,8,10,13,14
        
L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]
def print_list(lst):
    for x in lst:
        # 如果x绑定数字,打印数字
        if type(x) is int:
            print(x)
        # 如果x绑定列表,打印列表
        elif type(x) is list:
            print_list(x)

print_list(L)

        2)写一个函数sum_list(lst)返回这个列表中所有数字的和
        如:
            print(sum_list(L))  #106

def sum_list(lst):
    s = 0
    for x in lst:
        # 如果x是数字,则把x加到s中
        if type(x) is int:
            s += x
        # 如果x是列表,把列表的和加到s中
        else:
            s += sum_list(x)
    return s

print(sum_list(L))  # 106

    2.写程序求出1~20 的阶乘的和

def func(n):
    if n == 1:
        return 1
    return n * func(n - 1)
print(sum(map(func, range(1,21))))


    3.改写之前的学生信息管理程序,添加如下四个功能:
    5)  按学生成绩高~低显示学生信息
    6)  按学生成绩低~高显示学生信息
    7)  按学生年龄高~低显示学生信息
    8)  按学生年龄低~高显示学生信息