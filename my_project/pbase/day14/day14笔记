day13回顾
    自定义模块
        xxx.py
        导入方式:三条
        搜索路径顺序:
            1.查找内建模块
            2.查找当前路径
            3.查找sys.path指定的路径中
    xxx.py---->xxx.pyc---->python3
    预置的变量:
        __doc__  绑定文档字符串
        __name__ 绑定模块名,当为主函数时绑定'__main__'
        __file__ 绑定模块的文件路径名
        __all__ 列表
            __all__ = ['var1', 'var2']
            在用from import *中,只导入列表中的变量(属性)
        隐藏属性
            以_开头的全局变量为隐藏变量
            from import *语句导入时不会导入隐藏变量

    包
        包含有一系列的模块或子文件夹
        导入语句:三条
            内建模块(c语言写的)
            标准库模块(python写的)
        相对导入:
            from . import *
            from .. import *
            from ..office.word import 
        __init__.py 实现包的内容
        __all__列表

    两个模块
        sys模块
            sys.path 	模块搜索路径 path[0] 是当前脚本程序的路径名，否则为 ''
            sys.modules 	已加载模块的字典
            sys.version 	版本信息字符串
            sys.version_info 	版本信息的命名元组
            sys.platform 	操作系统平台名称信息
            sys.argv 	命令行参数 argv[0] 代表当前脚本程序路径名
            sys.copyright 	获得Python版权相关的信息
            sys.builtin_module_names 	获得Python内建模块的名称（字符串元组）
            sys.exit([arg]) 	退出程序，正常退出时sys.exit(0)
            sys.getrecursionlimit() 	得到递归嵌套层次限制（栈的深度）
            sys.setrecursionlimit(n) 	得到和修改递归嵌套层次限制（栈的深度）
            
        random模块

day14笔记:
异常 (基础):Exception
    由于错误导致程序不能正常运行的情况
    什么是错误:
        错误是指由于逻辑或语法等导致一个程序无法正常执行的问题
    错误的特点:
        有些错误无法预知
    什么是异常:
        异常是程序出错时标识的一种状态
        当异常发生时,程序不会向下执行,而转去调用此函数的地方处理此错误并恢复
    作用:
        用于信号,通知上层调用者有错误产生需要处理

try 语句的两种用法:
    try-except 语句  (收异常)
    try-finally 语句

try-except 语句的语法:
    try:
        可能触发异常的语句
    except 错误类型1 [as 变量1]:
        异常处理语句1
    except 错误类型2 [as 变量2]:
        异常处理语句2
    except (错误类型3, 错误类型4) [as 变量3]:
        异常处理语句3
        .......
    except:
        异常处理语句other
    else:
        未发生异常的语句(此语句在未发生异常时执行)
    finally:
        最终语句(此语句在离开try时,一定会被执行)

作用:
    尝试捕获异常,得到错误通知,将程序由异常流程转为正常流程并继续执行
说明:
    as 子句是用于绑定错误对象的变量,可以省略
    except 子句可以有一个或多个,但至少要有一个
    except: 子句必须放在所有的except之后
    else 子句最多只有能一个,也可以省略不写
    finally 子句最多只能有一个,也可以省略不写
示例:
    
说明2:
    else 子句里的语句会在当前try中没有发生任何异常时被执行
    finally 子句 里的语句无论在异常状态还是正常状态都一定会被执行


练习:
    写一个函数 get_score() 获取学生的成绩(0~100中的整数),
    如果用户输入的成绩不是0~100之间的数,则返回0
        如:
            def get_score():
                s = input("请输入成绩(0~100):")
               ...
            score = get_score()
            print("学生成绩是:", score)

def get_score():
    s = input("请输入成绩(0~100):")
    sc = int(s)
    if 0 <= sc <= 100:
        return sc
    return 0

try:
    score = get_score()
except ValueError:
    print("你输入的成绩不合法")
else:    
    print("学生成绩是:", score)


错误类型见:
    home/tarena/python_base_docs_html/Python全部的异常类型.html

try-finall语句
    语法:
        try:
            可能触发异常的语句
        finally:
            最终语句
    说明:
        finally 子句不可以省略
        一定不存在except语句
    作用:
        通常用try-finally语句来执行触发异常时一定要执行的语句,
        无论异常是否发生,finally子句都会执行
        try-finally 语句不会改变程序的(正常/异常)状态
    示例见:
        try-finally.py
    
raise 语句:
    作用:
        触发一个错误,让程序进入异常状态
        发送错误给调用者
    语法:
        raise 异常类型
        或
        raise 异常对象
        或
        raise #重新触发上一次异常
    说明:
        raise 无参调用常用于try-except的 的 except子句中
    示例:
        raise.py
    
练习:
    写一个函数get_age()用来获取一个人的年龄信息
    此函数规定用户只能输入1~140之间的整数,如果用户输入其他的数则直接触发ValueError类型错误

def get_age():
    age = int(input("请输入年龄:"))
    if 1 <= age <= 140:
        return age
    raise ValueError('%d' %age)

try:
    age = get_age()
    print("用户输入的年龄是:", age)
except ValueError as err:
    print("用户输入的不是1~140之间的整数!!!")
    print('err=', err)



assert 语句(断言语句)
  语法:
    assert 真值表达式, 错误数据(通常是字符串)
  作用:
    当真值表达式为假(False)时,用错误数据创建一个
       AssertionError 类型的错误,并进入异常状态
    通常用来在编写代码时,故意抛出异常来发现错误
  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例见:
    assert.py

为什么要用异常处理机制
   在程序调用层数较深时,向主调函数传递错误信息要层层return
   比较麻烦,所以用异常处理机制

def f1():
    print("f1")
    error = ValueError("用户输入有错误")
    raise error

def f2():
    print("f2")
    f1()

def f3():
    print("f3")
    f2()

def main()
    try:
        f3()
    except ValueError:
        print("收到错误通知....", err)

main()
    


异常小结:
  语句:
    try-except   接收异常通知(把异常状态转为正常状态)
    try-finally  执行必须要执行的语句(无论正常/异常状态)
    raise 语句   抛出(发送) 错误通知,将程序转为异常状态
    assert 语句  根据条件决定是否抛出AssertionError类型 
                 的错误,并转为异常状态
    

迭代器 Iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj) 函数返回的对象(实例)
    迭代器可以用next(it) 函数获取可迭代对象的数据
函数:
  iter(iterable)  从可迭代对象中返回一个迭代器,iterable
            必须是一个能提供一个迭代器的对象
  next(iterator)  从迭代器iterator中获取下一个数据,如果
            无法获取下一行数据,则触发StopIteration异常
  说明:
    迭代器只能往前取值,不能后退
    用iter函数可以返回一个可迭代对象的迭代器
  示例:
    L = [2, 3, 5, 7]
    it = iter(L)  # it 绑定的是L提供的迭代器
    print(next(it))  # 2  # 向迭代器要数据
    print(next(it))  # 3
    print(next(it))  # 5
    print(next(it))  # 7
    print(next(it))  # StopIteration异常
    myit = iter(range(1, 10, 3))  # 1, 4, 7
    print(next(myit))  # 1
    print(next(myit))  # 4
    print(next(myit))  # 7
    print(next(myit))  # StopIteration异常

用迭代器函数iter,和next 访问可迭代对象的示例见:
    iterator.py


    
练习:
  1. 有一个集合
    s = {"唐僧", '悟空', '八戒', '沙僧'}
    用for 语句来遍历所有元素如下:
      for x in s:
          print(x)
      else:
          print("遍历结束")
    请将上面的for语句改写为while语句和迭代器实现



  2. 一个球从100米高空落下,每次落地后反弹高度为原高度的一半
    再落下,写程序
       1) 算出皮球第10次落地后反弹多高?
       2) 算出皮球第10次反弹后经过多少米的路程?

  3. 修改原学生信息管理程序,加入异常处理语句,让程序在任何情况
    下都能按逻辑正常执行
      如: 输入成绩和年龄时输入非法字符会导致程序崩溃


