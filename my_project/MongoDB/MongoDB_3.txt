前情回顾

1.数据库的插入操作
    insertOne  插入一条文档
    insertMany  插入多条文档
    insert  插入文档
    save()  如果_id相同会覆盖原来文档

2.查找操作
    find(query, field)
    findOne()

query的用法:
    操作符使用
        比较: $lt  $eq  $gt  $lte  $gte  $in  $nin
        逻辑: $and  $or  $not  $nor
        数组: $all  $size
        其他: %exists  $mod  $type

数据处理函数:
    pretty() 格式化显示查找结果
    limit() 显示前几条数据
    skip()  跳过前几条,显示后面的结果
    sort()
    count()
    distinct()

3.删除操作
    deleteOne(query)  删除一条数据
    deleteMany(query)  删除多条数据
    remove()          删除
    findOneAndDelete  查找并删除

******************************************************************


mysql: update table set ... where ...
mongo: db.collection.updateOne(query, update, upsert)
       功能: 修改第一个符合条件的文档
       参数: query  筛选条件  用法同find query
            update 要修改的数据项,需要配合修改操作符使用
            upsert bool类型  默认表示没有符合筛选条件的文档不做任何操作
            如果设置为true  则没有筛选到文档就根据query和update插入文档
    
    e.g. 将Joy年龄修改为18
    db.class0.updateOne({name:'Joy'},{$set:{age:18}})
    
    e.g.  如果没有符合条件的query则插入新数据
    db.class0.updateOne({name:'Han'},{$set:{age:18}}, {upsert:true})

    db.collection.updateMany(query, update, upsert)
    功能: 修改所有符合条件的文档
    参数: 同updateOne

    e.g.  同时修改所有符合条件的文档 
    db.class0.updateMany({age:{$lt:18}}, {$set:{age:20}})

    db.collection.update(query, update, upsert, multi)
    功能:  修改筛选到的内容
    参数: query 筛选条件
        update  修改内容
        upsert  如果设置为true  则没有筛选到文档就根据query和update插入文档
        multi  默认表示只修改第一条符合条件的文档
               设置为true表示修改多条
    
    db.collection.update({}, {$set:{age:10}, false, true)
    e.g.  所有人年龄修改为10
    db.class0.update({}, {$set:{age:10}}, false, true)

    db.collection.findOneAndUpdate(query, update)
    功能: 查找一个文档并筛选
    参数: query 筛选条件
         update 修改内容
    返回: 修改之前的文档
    e.g.  查找Lily的文档,将年龄修改为17
    db.class0.findOneAndUpdate({name:'Lily'}, {$set:{age:17}})

    db.collection.findOneAndReplace(query, doc)
    功能: 查找并替换一个文档
    参数: query  筛选文档
         doc  替换的文档
    返回: 原有文档
    e.g.  查找一个文档,并替换为新的文档
    db.class0.findOneAndReplace({name:'joy'}, {name:'Jame', age:17, sex:'m'})


修改器的使用:
    $set: 修改一个域的值,或者添加一个域
    e.g.  使用$set增加一个域
    db.class0.updateOne({name:{$exists:false}}, {$set:{name:'Han'}})
    e.g. 删除Han的age域
    db.class0.updateOne({name:'Hans'}, {$unset:{age:''}})

    $rename: 修改一个域的域名
    e.g. db.class0.updateMany({},{$rename:{sex:'gender'}})

    $setOnInsert:当upsert插入文档时,作为补充的插入内容(没有Han时,插入以下字段)
    e.g.  db.class0.update({name:'Han'}, {$set:{age:18}, $setOnInsert:{gender:'w'}}, {upsert:true})

    $inc: 加法修改器
    e.g.  所有年龄+1
    db.class0.updateMany({}, {$inc:{age:1}})

    $mul: 乘法修改器
    e.g.  
    db.class0.updateOne({name:'Han'}, {$mul:{age:2}})

*$inc,$mul 操作数可以是小数,负数,整数,小数

    $max: 指定某个域的值,如果小于规定值则修改为规定值,大于规定值则不变(规定下限)
    e.g. Lily原本小于20,现为20
    db.class0.updateOne({name:'Lily'}, {$max:{age:20}})

    $min: 指定某个域的值,如果大于规定值则修改为规定值,小于规定值则不变(规定上限)
    e.g.  Han的年龄原本38,现为20
    db.class0.updateOne({name:'Han'}, {$min:{age:20}})
    

数组修改器:
    $push: 向数组中添加一项
    e.g.  小亮补考了,86分,向数组中增加一项86
    db.class2.updateOne({name:'小亮'},{$push:{score:86}})

    $pushAll: 向数组中增加多项
    e.g.  小红表现优异,有加分[5,10]4
    db.class2.updateOne({name:'小红'}, {$pushAll:{score:[5, 10]}})

    $pull: 从数组中删除某一个值
    e.g.  小红违纪,删除小红的5
    db.class2.updateOne({name:'小红'}, {$pull:{score:5}})

    #pullAll: 同时删除数组中的多个值
    e.g.  小红被针对了,删除小红的88,10
    db.class2.updateOne({name:'小红'}, {$pullAll:{score:[88,10]}})

    $pop: 从数组中弹出一项(取值为1,从后面弹.-1则为前面弹)
    e.g.  小明为保护小红,舍身取义,甘愿受罚.去掉了最后一项成绩
    db.class2.updateOne({name:'小明'}, {$pop:{score:1}})

    $addToSet: 向数组中添加一项,但是不能添加已有的内容
    e.g.  小明的行为感动了xx,成绩补全
    db.class2.updateOne({name:'小明'}, {$addToSet:{score:91}})

    $each: 对多个值进行逐一操作
    e.g.  最终小红被赦免
    db.class2.updateOne({name:'小红'},{$push:{score:{$each:[90,10]}}})

    $position:指定值的插入的位置,配合each
    db.class2.updateOne({name:'小明'},{$push:{score:{$each:[5],$position:1}}})

    $sort: 对数组排序,搭配each使用(1,从小到大.-1,从大到小)
    e.g.  在不添加新值,对数组排序
    db.class2.updateOne({name:'小明'},{$push:{score:{$each:[],$sort:1}}})


时间类型
    获取当前时间:
        1.new Date() 自动生成当前时间
    db.class1.insertOne({block:'Python入门', data:new Date()})

        2.ISODate()  自动获取当前时间
    db.class1.insertOne({block:'Python精通', data:ISODate()})

        3.Date()  获取系统当前时间
    db.class1.insertOne({block:'Python放弃', data:Date()})

    存储任意时间:
        1.ISODate()
        功能: 将指定的时间字符串转换为mongodb时间存储
        参数: 指定时间
            '2019-01-01 12:12:12'
            '20190101 12:12:12'
            '20190101'
        db.class1.insertOne({block:'Python之美', data:ISODate('20191001 19:00:00')})
    
    时间戳:
        valueOf()
        功能: 将ISODate转换为时间戳
        e.g.  记录1970.1.1 00:00:00 到现在多少毫秒
        db.class1.insertOne({block:'Python之美', data:ISODate().valueOf()})

    Null类型数据
        值: null

        1. 表示某个域值为空
        db.class1.insertOne({block:'Python放生', price:null})

        2.表示某个域不存在
        e.g.  查找出price域为null或者不存在这个域的文档
        db.class1.find({price:null}, {_id:0})

        > db.class1.find({price:{$exists:true}}, {_id:0})
        { "block" : "Python放生", "price" : null }

Object类型(内部文档)
    文档中某个域的值还是文档,则该值为Object

db.class3.insertOne({name:'鲁迅', book:{title:'狂人日记', price:'48.5', publication:'中国工业出版社'}})
db.class3.insertOne({name:'老舍', book:{title:'茶馆', price:'46', publication:'中国教育出版社'}})
db.class3.insertOne({name:'钱钟书', book:{title:'围城', price:'50', publication:'中国教育出版社'}})
db.class3.insertOne({name:'季羡林', book:{title:'我的先生朋友们', price:'50', publication:'中国教育出版社'}})
db.class3.insertOne({name:'老子', book:{title:'道德经', price:'100', publication:'中国教育出版社'}})

db.class3.find({'book.title': '狂人日记'}, {_id:0})

当使用内部文档的某个域时,需要外部文档域名.内部文档域名的方法引用,引用时要加引号

e.g.  通过book.title查找
db.class3.find({'book.title': '狂人日记'}, {_id:0})

e.g.  修改茶馆价格为35
db.class3.update({'book.title': '茶馆'},{$set:{'book.price':35}})

通过数组下标直接引用数组项
*在使用数组时,可直接通过数组域.数组下标操作数组的某一项

e.g.  把小明的第二项成绩改为67
db.class2.update({name:'小明'}, {$set:{'score.1':67}})

e.g.  查找第一项大于90
db.class2.find({'score.0':{$gt:90}}, {_id:0})


练习:
    基于之前的grade数据库
        1.将小红的年龄修改为8岁,兴趣爱好变为跳舞
            db.class.update({name:'Android'}, {$set:{age: 8, hobby:['draw', 'dance']}})
        2.追加小明兴趣爱好,唱歌
            db.class.update({name:'Huawei'}, {$push:{hobby:'sing'}})
        3.小王多了兴趣爱好吹牛,打篮球
            db.class.update({name:'Meizu'}, {$pushAll:{hobby:['chuiniu', 'basketball']}})
        4.小李兴趣多了跑步唱歌,但是注意不要和已有的重复
            db.class.update({name:'Taobao'}, {$addToSet:{hobby:{$each:['running','sing']}}})
        5.班级所有同学年龄+1
            db.class.updateMany({}, {$inc:{age:1}})
        6.删除小明sex属性
            db.class.update({name:'Huawei'}, {$unset:{sex:''}})
        7.删除小李兴趣的第一项
            db.class.update({name:'Huawei'}, {$pop:{hobby:-1}})
        8.删除小红兴趣中画画和唱歌
            db.class.update({name:'Tmooc'}, {$pushAll:{hobby:['draw', 'sing']}})
        9.为小王增加一个域, 备注:{民族:'回族', 习俗:'不吃猪肉'}
            db.class.update({name:'Gucci'}, {$set:{备注:{民族:'回族', 习俗:'不吃猪肉'}}})
        10.在小王备注中增加一项,宗教:'伊斯兰教'
            db.class.update({name:'Gucci'}, {$set:{'备注.宗教':'伊斯兰教'}})

索引:
    什么是索引?
        索引是奖励文档所在的位置的查找清单,使用索引可以方便的进行快速查找,
        减少遍历次数,提高查找效率

    索引约束:
        1. 索引本身也占有数据库空间,所以当数据量很小时没有必要创建
        2.索引表需要根据数据的修改及时修改,否则索引就不和内容配套,失去了意义.
          如果数据库操作时频繁的写操作,而不是查找操作就不适合创建索引
    
    创建索引:
        db.collection.createIndex(index, option)
        功能: 创建索引
        参数: 索引域 和 索引选项
        1正序  2逆序

        e.g.  为name域创建索引
        db.class0.createIndex({name:1})
        
        *_id域会自动生成索引,该索引不能删除
        *1表示正向索引,-1表示逆向索引

        查看集合中的索引
        db.collection.getIndexex()

        定义索引名称:
        e.g.  通过索引选项name定义索引名称
        db.class0.createIndex({age:1}, {name:'ageIndex'})

    其他索引创建方法:
        ensureIndex()
        功能: 创建索引
        参数: 同createIndex

        e.g.  创建方法同createIndex
        db.class0.ensureIndex({gender:1})

        createIndexes({},{},{},...)
        功能: 同时创建多个索引
        参数: 数组中填写多个索引项即可

        e.g.  同时创建两个索引age_-1,gender_-1(要两项都合法)
        db.class0.createIndexes({age:-1}, {gender:-1})

删除索引:
    db.collection.dropIndex()
    功能: 删除一个索引
    参数: 索引名称或键值对删除
    db.class0.dropIndex('name_1')
    db.class0.dropIndex({'age':1})

    db.collection.dropIndexes()

索引类型:
    符合索引: 根据多个域创建一个索引
    方便进行符合查询,
    e.g. 根据name  age两个域创建一个索引
    db.class0.createIndex({name:1, age:-1})

子文档和数组索引:
    表示如果对某个域创建索引,该域的值为文档或者数组,则对数组或者子文档中某一项进行查找也是索引查找.
    如果对book创建索引则该查找也是索引查找
    db.class3.createIndex({book:1})
    db.class3.find({'book.title': '围城'}, {_id:0})

    唯一索引: 要求创建索引的域不能有重复值
    db.class3.createIndex({age:-1}, {unique:true})  #失败

    e.g.  对name域创建唯一索引
    db.class3.createIndex({name:-1}, {unique:true})

    稀疏索引: 会在创建索引时忽略没有指定域的文档
    e.g.  对gender域创建稀疏索引 
    db.class0.createIndex({gender:1}, {sparse:true})

聚合操作
    对文档数据进行整理筛选统计

    db.collection.aggregate()
    功能: 完成聚合操作
    参数: 聚合条件,需要配合聚合操作符


    聚合操作符:
    $group  分组聚合   往往需要配合一定的统计操作符完成
        统计求和: $sum
        e.g.  按照性别分组,获取每组人数
        db.class0.aggregate({$group:{_id:'$gender', num:{$sum:1}}})
                                        分组字段         组名    每次加的值
        { "_id" : "m", "num" : 2 }
        { "_id" : "w", "num" : 3 }    

        db.class0.aggregate({$group:{_id:'$gender', num:{$sum:'$age'}}})
        { "_id" : "m", "num" : 29 }
        { "_id" : "w", "num" : 51 }


作业:
    1.熟练使用修改操作和索引操作
    2.mysql修改练习使用mongo完成
    3.查文档完成,$avg,$project

    