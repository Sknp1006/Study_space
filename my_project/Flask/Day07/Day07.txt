1.重定向
	1.什么是重定向
		由服务器端通知客户端向一个新的地址发送请求
2.ORM 关系映射
	1.一对多
		1.什么是一对多
			A表中的一条数据可以关联到B表中的多条数据
			B表中的一条数据可以关联到A表中的一条数据
			( 用户(一) 与 银行卡(多) )
		2.一对多在数据库中的体现
			主外键的关系可以创建一对多
			A表中创建主键(一)
			B表中创建外键，并引用在A表的主键(多)
			在"多"表中增加外键，对"一"表的主键进行引用
		3.在Flask-SQLAlchemy 中的实现
			原则：
				在"多"实体类中增加对"一"实体类的引用
				在"一"实体类中增加"关联属性"和"反向引用关系属性"

			1.在"多"实体类中
				增加一个列，引用自“一”表(类)对应的主键列
				外键列名 = db.Column(
					db.Integer,
					db.ForeignKey('主键表名.主键列名')
				)

				示例：
					1门课程(Course)可以由多名老师(Teacher)教授
					1名老师(Teacher)只能教授一门课程(Course)
			2.在"一"实体类中
				增加关联属性和反向引用关系属性
				目的：在编程语言中创建类(对象)与类(对象)之间的关系
				1.关联属性
					在"一"实体中，要通过哪个<<属性>>来获取到对应的"多"的实体对象们
				2.反向引用关系属性
					在"多"实体中，要通过哪个<<属性>>来获取到对应的"一"的实体对象

				语法：在"一"实体类中增加
					关联属性名 = db.relationship(
						'多的实体类名',
						backref='自定义一个反向引用关系属性名',
						lazy='dynamic'
					)

				lazy : 指的是如何加载关联数据们
					1.select
						首次访问时加载关联数据
					2.immediate
						源对象加载后马上加载关联数据
						(使用表连接的方式)
					3.subquery
						效果同上(使用子查询)
					4.noload
						永不加载关联数据
					5.dynamic
						不加载记录，但提供加载记录的查询
						course.teachers.all()
						course.teachers.filter(xxx).all()

					
	2.一对一
	3.多对多





class Users():
	name = 'xxx'
	age = 30
	wife = Wife()

class Wife():
	name = None
	age = None
	gender = '女'


user = Users()
user.name = "小泽Maria"
user.age = 30

wife = Wife()
wife.name = "魏老师"
wife.age = 47

user.wife = wife
