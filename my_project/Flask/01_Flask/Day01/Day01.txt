赵旭
zhaoxu@tedu.cn

WEB 服务器端

Flask 轻量级框架
AJAX  在WEB中完成异步的请求和响应
Django重量级框架

Python WEB
1.静态网页 和 动态网页
	1.静态网页 : 无法与服务器做动态交互的网页
		(*.html,*.htm)
	2.动态网页 : 允许与服务器做动态交互的网页
2.WEB 与 服务器
	1.WEB : 网页
	2.服务器
		能够给用户提供服务的机器就是服务器
		1.硬件 与 软件
			1.硬件
				一台主机
			2.软件
				一个能够接受用户请求并给出响应的程序
				1.APACHE
				2.TOMCAT
				3.IIS (Internet Information Service)
				4.Nginx
			3.作用
				1.存储WEB信息
				2.处理用户的请求(request)和响应(response)
				3.执行服务器端程序
				4.具备最基本的安全功能
3.框架
	1.什么是框架
		框架是一个为了解决开放性问题而存在的一种程序结构
		框架本身提供了最基本的一些功能
		我们只需要在基本功能上搭建自己的操作就可以了
	2.Python Web 框架
		1.Flask - 轻量级
		2.Webpy - 轻量级
		3.Tornado - 异步框架
		4.Django - 重量级
	3.框架模式
		1.MTV
			M : Models,模型层,主要负责数据库建模
			T : Templates,模板层,处理用户的显示内容
				如 html
			V : Views,视图层,处理与用户打交道的内容,即请求和响应的处理
		2.MVC
			M : Models 模型层,负责数据库的建模
			V : Views, 视图层,处理用户的显示内容(html)
			C : Controller,控制器,处理与用户交互相关内容

			M  ---  M
			V  ---  T
			C  ---  V
4.IDE - PyCharm	
5.Flask框架
	1.什么是Flask
		Flask是一个基于Python并且依赖于Jinja2模板引擎和Werkzeug WSGI 服务的一个微型框架(Micro Framework)

		WSGI:Web Server Gateway Interface
			(WEB服务网关接口)

		官网:http://flask.pocoo.org/

		Flask 采用 MTV的框架模式

	2.安装 Flask
		1.查看已安装的Flask版本
			在 python 的交互模式中:
				1.import flask
					没报错:已经安装了Flask,可以继续查看版本
					报错:没安装Flask
				2.flask.__version__
					查看Flask的版本
		2.在线安装
			sudo pip3 install flask

			sudo pip3 install Flask安装包路径/名称
		3.Flask 初始化
			... ...
			练习:
				1.创建 run02.py 文件,搭建Flask结构
				2.访问路径 : 127.0.0.1:5000/login
					网页中显示: 欢迎访问登录页面
				3.访问路径 : 127.0.0.1:5000/register
					网页中显示: 欢迎访问注册页面
			(上课时间: 15:35)

		4.强制关闭Flask服务
			1.查询 Flask 服务的进程ID
				netstat -lptu
			2.杀掉指定PID的进程
				sudo kill -9 PID
6.Flask - 路由(route)
	1.什么是路由
		路由是处理url与视图函数关系的程序
	2.路由的体现
		在Flask中,路由是通过 @app.route 装饰器来表示的
		1.路由的基本体现
			# 127.0.0.1:5000/
			# localhost:5000/
			@app.route('/')
			def index():
				return xxx

			# 127.0.0.1:5000/admin/login
			@app.route('/admin/login')
			def login():
				return xxx
		2.带参数的路由
			参数在路由中是一个不确定的数据,根据访问时的路径向里传递
			#127.0.0.1:5000/news/2018
			#127.0.0.1:5000/news/2017
			1.基本的带参路由
				#127.0.0.1:5000/news/2018
				#127.0.0.1:5000/news/2017
				@app.route('/news/<year>')
				def news(year):
					year:表示的就是地址栏上传递过来的数据
			2.带多个参数的路由
				#127.0.0.1:5000/news/2018/7
				#127.0.0.1:5000/news/2015/12

				@app.route('/news/<year>/<month>')
				def news1(year,month):
					xxx
			3.指定参数类型的路由
				# 127.0.0.1:5000/info/mengmeng/20
				# 127.0.0.1:5000/info/weige/47
				@app.route('/info/<name>/<int:age>')
				def info(name,age):
					name : 字符串
					age  : 整数
					return xxx
				
				int: 类型转换器
				Flask中所支持的类型转换器:
					类型转换器        作用
					缺省              字符串,不能有斜杠('/')
					int:              整数
					float:            小数
					path:             字符串,可以有斜杠('/')

				(上课:  17:05)
		3.多 URL 的路由匹配
			127.0.0.1:5000/
			127.0.0.0:5000/index

			实现方案:
				@app.route('/地址1')
				@app.route('/地址2')
				... ...
				def index():
					xxx xxx
			练习:
				当访问路径是以下任何一个的时候:
					127.0.0.1:5000/
					127.0.0.1:5000/index
					127.0.0.1:5000/数字
					127.0.0.1:5000/index/数字
				将程序交给 index() 视图处理函数
					根据数字的传递情况给出响应
					如果传递数字到路由中:
						响应:您当前看的页数为:xxx
					如果没有传递数字到路由中:
						响应:您当前看的页数为:1
	3.URL的反向解析
		正向解析:程序自动解析,根据@app.route()中的访问路径,来匹配处理函数
		反向解析:通过视图处理函数的名称生成对应的访问路径

		在Flask中实现反向解析:
		from flask import url_for
		语法:
			url_for(funName[,args])
				funName:要生成地址的函数名
				args:地址中需要的参数,可选的
				返回值:字符串,对应的访问地址



作业:
	创建Flask项目 - Blog
	创建路由: / -> 首页
	创建路由: /register -> 注册页
	创建路由: /login -> 登录页
	创建路由: /list -> 列表页
	创建路由: /info -> 详情页

