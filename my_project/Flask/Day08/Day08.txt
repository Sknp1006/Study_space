1.重定向
	from flask import redirect
	return redirect('地址')
2.一对多映射
	1.实现
		1.在"多"实体中增加外键
			外键列名 = db.Column(
				db.Integer,
				db.ForeignKey("主表.主键")
			)
		2.在"一"实体中增加关联属性和反向引用关系属性
			属性名 = db.relationship(
				"多的实体类名",
				backref="反向引用关系属性名",
				lazy="dynamic"
			)
	2.使用
		class Course(db.Model):
			__tablename__ = "course"
			id = db.Column(xxx)
			teachers = db.relationship(
				"Teacher",
				backref="course",
				lazy="dynamic"
			)

		class Teacher(db.Model):
			id = db.Column(xxx)
			course_id = db.Column(
				db.Integer,
				db.ForeignKey("course.id")
			)
		
		查询数据：
			course = Course.query.filter_by(id=1).first()
			teachers = course.teachers.all()

			teacher = Teacher.query.filter_by(id=1).first()
			course = teacher.course
==================================================
1.ORM 关系映射
	1.一对多(略)
	2.一对一
		1.什么是一对一
			A表中的一条数据只能关联到B表中的一条数据
			B表中的一条数据只能关联到A表中的一条数据
		2.一对一在数据库中的设置
			关联的两张表中的任意一张表：
				1.增加外键，引用另一张表的主键
				2.并且要施加唯一约束
		3.在ORM中实现
			1.在任意一个实体类中增加外键和唯一约束
				外键列名 = db.Column(
					db.Integer,
					db.ForeignKey('主表.主键'),
					unique = True
				)
			2.在另一个实体类中增加关联属性和反向引用关系属性
				属性名 = db.relationship(
					"关联的实体类",
					backref="反向引用关系属性名",
					uselist = False
				)

				uselist : 设置为False，表示关联属性是一个标量而不是列表
	3.多对多
		1.什么是多对多
			A表中一条数据可以与B表中的多条数据关联
			B表中一条数据可以与A表中的多条数据关联
		2.在数据库中的实现
			依靠第三张关联表的方式来实现
		3.在ORM中
			1.创建第三个实体类(表)
			2.关联属性和反向引用关系属性
				任意一个类中增加：
					属性名 = db.relationship(
						"关联类名",
						secondary='第三张关联表名',
						lazy='dynamic',
						backref=db.backref(
							"反向引用关系属性名",
							lazy="dynamic"
						)
					)
2.Cookies & Session
	1.Cookies
		1.什么是Cookies
			Cookies是一个数据存储手段
			将一段文本保存在客户端(浏览器)的一种手段并可以长时间保存
		2.cookies的使用场合
			1.记住密码
			2.用户喜好
		3.cookies的特点
			1.安全性较低
				明文显示，可以编辑
			2.浏览器会为不同的网站开辟独立的存储空间
			3.各个浏览器之间的cookies值也不共享
		4.Flask中使用cookies
			1.使用响应对象将数据保存进cookies
				1.响应对象的构建
					1.重定向就是响应对象
						resp = redirect('/xxx')
						# resp 就是响应对象
					2.通过 make_response() 构建响应对象
						特点：将字符串构建成响应对象
						from flask import make_response
						resp = make_response("" 或 render_template())
				2.保存cookies
					响应对象.set_cookie(key,value,max_age)
						key:保存的cookie的名称
						value:保存的cookie的值
						max_age:最大的存活时间，取值为数字，以s为单位(不写s)
			2.获取cookies的值
				每次浏览器向服务器发送请求时，都会将本站点下的所有cookies都带到服务器上

				通过 request.cookies 获取所有的cookies值 
			3.删除 cookie 的值
				1.del request.cookies['cookie名称']
				2.响应对象.delete_cookie('key')

def xxx():
	return render_template('xxx.html')



