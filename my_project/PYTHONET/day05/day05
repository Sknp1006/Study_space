前情回顾

1.poll方法实现IO多路复用
    p = poll()
    p.register()
    p.unregister()
    p.poll()
2.epoll方法实现IO多路复用
    *效率更高
    *触发方式更多(EPOLLET)
    *能监控更多IO
3.struct模块
    功能:将一组数据结构化打包,转换为bytes
        或者将字节串解析为元组.
    st = Struct(fmt)
    st.pack()将一组数据转换为bytes
    st.unpack()将bytes字串解析为一组数据
4.本地套接字
    sockfd = socket(AF_UNIX, SOCK_STREAM)
5.多任务编程和进程
    *并发和并行
    *什么是进程
    *进程的状态
    *PID,父子进程,PCB
6.os.fork()创建新的进程


****************************************************
一.fork()创建子进程的特点
    1.子进程会复制父进程全部的内存空间和代码段
    2.子进程会从fork的下一句开始执行
    3.if  elif  else结构正式根据父子进程fork的返回值不同
      让父子进程执行不同的内容,几乎是固定搭配
    4.父子进程的运行互不影响,使用同一个终端,运行顺序不定
    5.子进程有自己特有的PID, PCB,命令集等  
    6.进入阻塞状态的进程一定会让出cpu时间片
    7.子进程连同fork之前开辟的空间也会复制.但是父子进程各自空间独立,操作各自空间的内容互不影响
二.进程修相关函数的使用
    os.getpid()
    功能: 获取当前进程的pid号
    返回值: pid号
    os.getppid()
    功能: 获取父进程的PID号
    返回值: 父进程PID号
    os._exit(status)
    功能: 退出一个进程
    参数: 表示进程退出状态
    sys.exit([status])
    功能: 退出一个进程
    参数: 默认为0 整数表示退出状态
         字符串 则在进程退出时打印该字符串
三.孤儿进程和僵尸进程
孤儿进程: 父进程先于子进程退出此时子进程成为孤儿进程
2146
*孤儿进程会被系统进程收养, 此时系统进程就会称为该进程新的父进程

僵尸进程: 子进程先于父进程退出,父进程没有处理子进程的退出状态,此时子进程就会成为僵尸进程

*僵尸进程虽然结束,但是会存留部分PCB在内存,大量僵尸进程会占用内存资源

如何处理僵尸进程:
    1.在父进程中使用函数处理子进程退出状态
      pid, status = os.wait()
      功能: 阻塞等待处理子进程退出
      返回值: pid  退出的子进程pid
             status 子进程的退出状态
      pid, status = os.waitpid(pid, option)
      功能: 阻塞等待处理子进程退出
      参数:  pid -1 表示等待任意子进程退出
                 >0 表示等待指定pid的子进程退出
            option 0 表示阻塞等待
                   WNOHANG 表示非阻塞

      返回值: pid 退出的子进程的PID
             status 子进程的退出状态
    2.创建二级子进程
      [1]父进程创建子进程退出,等待子进程退出
      [2]子进程创建二级子进程后立即退出
      [3]将事件交由父进程和二级子进程完成
          一级子进程被回收,二级子进程称为孤儿,都不会变成僵尸


群聊聊天室
功能: 类似qq微信群聊
1.进群输入姓名,姓名不能重复
2.进入聊天室会向其他人发送通知
    xxx 进入了聊天室
3.某人发消息群里其他人能够收到
    xxx:说xxxxxxxxxx
4.某人退出聊天室也会向他人发送通知
    xxx 退出了聊天室
5.管理员可以发送管理员消息,此时群里所有人都能收到
    管理员说: xxxxxxxx

1.确定技术模型
    *消息发送: 转发 先发送给服务器然后转发给其他人
    *套接字: udp套接字
    *存储用户: 字典或者列表
    *消息收发随意: 使用两个进程分别处理消息收发
2.注意事项
    *封装, 将每个功能封装成函数
    *测试, 实现一个功能,测试一个功能
    *流程, 搭建网络连接,逐个功能实现
具体功能:
    1.网络通信
        客户端 : 创建UDP套接字,绑定地址,创建多进程

        服务端 : 创建UDP套接字,创建多进程


    2.用户登陆
        服务端 : *接收姓名
                *判断姓名是否存在
                *根据判断结果回复客户端
                *不允许登录则功能结束
                *允许登录则将用户加入数据结构
                *将用户登录提示发送给其他人
        客户端 : *输入姓名
                *将姓名发送给服务器
                *接收服务器反馈
                *不允许登陆则重新输入,允许则进入聊天
                *创建新的进程,用于消息收发

    3.聊天
        服务端: *接收消息
               *将消息转发给其他人
        客户端: *输入消息
               *将消息发给服务器
    4.用户退出
        服务端:  *收到##表示客户端退出
                *将用户从user移除
                *告知其他人xxx退出 

        客户端:  *输入##表示退出
                *将退出信息发送给服务器
                *发送进程退出
                *接收进程接收到服务器指令退出
    5.管理员信息

作业:
    1.梳理聊天室代码思路
    2.梳理fork创建进程内容
    3.用fork创建父子进程,同时复制一个文件,各复制一半到一个新文件.
