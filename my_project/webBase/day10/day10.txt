复习 :
1. 函数
	参数
	返回值
	作用域:
		1. 函数外定义的变量都是全局变量;函数内省略var关键字定义的变量也是全局变量
		2. 函数内使用var关键字定义的变量都是局部变量,只能在当前作用域中使用
		3. 多级作用域中访问变量,遵循从内向外,逐级作用域查找,直至全局作用域
	匿名函数 :
		(function (){})(); 匿名函数自执行
		var fn = function (){};
		fn();
2. 数组
	创建
		var arr = [10,20];
		var arr2 = new Array(10,20);
		var arr3 = new Array(5); //创建长度为5的空数组
	操作元素
		借助下标访问数组元素
		arr[index]
	遍历数组
		for(var i = 0; i < arr.length;i++){
			arr[i]
		}
		for(index in arr){
			arr[index]
		}
	
---------------------------------------------


Day10
1. 数组
	属性 : length
	方法 :
		1. push(data)
			在数组的末尾添加一个或多个元素,多个元素之间使用逗号隔开
			返回添加之后的数组长度
		2. pop()
			移除末尾元素
			返回被移除的元素
		3. unshift(data)
			在数组的头部添加一个或多个元素
			返回添加之后的数组长度
		4. shift()
			移除数组的第一个元素
			返回被移除的元素
		5. toString()
			将数组转换成字符串类型
			返回字符串结果
		6. join(param)
			将数组转换成字符串,可以指定元素之间的连接符,如果参数省略,默认按照逗号连接
			返回字符串
		7. reverse()
			反转数组,倒序重排
			返回重排的数组,注意该方法直接修改原数组的结构
		8. sort()
			对数组中元素排序,默认按照Unicode编码升序排列
			返回重排后的数组,直接修改原有数组
			参数 : 可选,自定义排序算法
				例 :
					function sortASC(a,b){
						return a-b;
					}
					作为参数传递到sort()中,会自动传入两个元素进行比较,如果a-b>0,交换元素的值,自定义升序排列

					function sortDESC(a,b){
						return b-a;
					}
					如果返回值>0,交换元素的值,b-a表示降序排列
		9. forEach(param)
			遍历数组元素
			参数为函数
			例 :
				arr.forEach(function (elem,index){
					//forEach()方法会自动调用匿名函数,依次传入元素及下标
				});
				注 : 自定义匿名函数中,可以只写一个参数接收元素
	二维数组 :
		数组中的每个元素又是数组
		例 : 
			var arr1 = [1,2,3];
			var arr2 = [[1,2],[3,4],[5,6,7]];
			//操作数组元素
			var r1 = arr2[0] //内层数组
			var num = r1[0]; //值 1
			//简写
			var num2 = arr2[1][0];
2. String 对象
	创建 :
		var str = "100";
		var str2 = new String("hello");
	特点 :
		字符串采用数组结构存储每位字符,自动为字符分配下标,从0开始
	属性 :
		length 获取字符串长度
	方法 :
		1. 转换字母大小写
			toUpperCase() 转大写字母
			toLowerCase() 转小写字母
			返回转换后的字符串,不影响原始字符串
			练习 :
				模拟验证码
				1. 创建数组,包含大小写字母,包含0-9的数字
				2. 生成4位随机验证码
						Math.random() 生成[0,1) -> [0,length)->取整
				3. 提示用户输入(不区分大小写)
				4. 验证用户输入,给出结果
				--------------------
				5. 使用按钮,点击时提示验证码输入
				6. 验证使用函数封装
				7. 生成验证码的操作使用函数封装,接收参数,生成指定位的验证码
		2. 获取字符或字符编码
			charAt(index)			获取指定下标的字符
			charCodeAt(index) 获取指定下标的字符编码
			参数为指定的下标,可以省略,默认为0
		3. 获取指定字符的下标
			1. indexOf(str,fromIndex)
				作用 : 获取指定字符的下标,从前向后查询,找到即返回
				参数 :
					str 表示要查找的字符串,必填
					fromIndex 表示起始下标,默认为0
				返回 :
					返回指定字符的下标,查找失败返回-1
			2. lastIndexOf(str,fromIndex)
				作用 : 获取指定字符最后一次出现的下标,从后向前查找,找到即返回
				参数 :
					str 必填,表示要查找的内容
					fromIndex	选填,指定起始下标
		4. 截取字符串
			substring(startIndex,endIndex)
			作用 : 根据指定的下标范围截取字符串,startIndex ~ endIndex-1
			参数 :
				startIndex	表示起始下标
				endIndex	表示结束下标,可以省略,省略表示截止末尾
			练习 :
				1. 从邮箱字符串中提取用户名和服务商
					zhangsan@qq.com
				2. 从身份证号中提取年月日
					10010019000110235X
		5. 分割字符串
			split(param)
			作用 : 将字符串按照指定的字符进行分割,以数组形式返回分割结果
			参数 : 指定分隔符,必须是字符串中存在的字符,如果字符串中不存在,分割失败,仍然返回数组
			练习 :
				101_5&201_3&301_8
				商品id:101 商品数量:5
		6. 模式匹配
			作用 : 借助正则表达式实现字符串中固定格式内容的查找和替换
			正则表达式 :
				var reg1 = /字符模式/修饰符;
				修饰符 : 
					i : ignorecase 忽略大小写
					g : global 全局范围
				例 :
					var reg2 = /知乎/ig;
					var reg3 = /\d{6,10}/g;
			字符串方法 :
				1. match(regExp/subStr)
					作用 : 查找字符串中满足正则格式或满足指定字符串的内容
					返回 : 数组,存放查找结果
				2. replace(regExp/subStr,newStr)
					作用 : 根据正则表达式或字符串查找相关内容并进行替换
					返回 : 替换后的字符串,不影响原始字符串
3. RegExp 对象
	1. 正则表达式 : Regular Expression
		指定字符串的组成模式
	2. 创建 :
		var reg1 = new RegExp("正则格式","修饰符");
		var reg2 = /正则格式/修饰符;
	3. 属性 :
		lastIndex 可读可写,表示下一次匹配的起始下标
	4. 方法 :
		test(param)
		用于验证参数字符串中是否存在满足正则格式的内容
		返回布尔值
		注意 : 全局匹配下,同一个正则对象如果重复使用,由于对象属性lastIndex会跟随每一次匹配发生变化,导致结果有误,可以手动将lastIndex归0;或者避免同一个正则重复使用;如果不设置全局匹配,每次都从下标0开始查找
4. Math 对象
	作用 : 提供数学计算相关的方法
	属性 :
		Math.PI 圆周率或180度 (数学常量)
		Math.E	自然对数
	方法 :
		常用方法(详见09-Math.html)
			Math.abs(value) 求绝对值
			Math.max(n1,n2,n3) 求一组数据的最大值
			Math.min(n1,n2,n3) 求一组数据的最小值
			Math.random() 生成[0,1)之间的随机数
			Math.ceil(value) 向上取整,舍弃小数,整数位+1
			Math.floor(value) 向下取整,舍弃小数,保留整数
			Math.round(value) 四舍五入取整数
5. Date 对象(详见10-date.html)
	

	
		
	

	


	
	

							


					

		

		







				
			










