复习 :
	1. 布局方式
		1. 浮动布局 : 不占位,可以设置宽高,实现元素共行显示,自带文字环绕效果
			 浮动问题及解决 : 子元素全部浮动导致父元素高度为0
				解决 : 父元素设置高度;
							 父元素设置overflow:hidden;
							 添加空的块元素,设置clear:both;
		2. 定位 :
			1. 相对定位(relative)
					参照元素在文档中的原始位置偏移,不脱流
			2. 绝对定位(absolute)
					参照已定位的祖先元素偏移,会脱流
					父相子绝
			3. 固定定位(fixed)
					参照窗口进行偏移,不跟随页面滚动而滚动
			4. 偏移属性
					调整已定位元素的位置
					top/left
					right/bottom
			5. 堆叠次序
					调整已定位元素的堆叠次序
					z-index,值越大越靠上
	2. CSS属性
		1. 转换属性(了解)
			transform:translate() scale() rotate();
		2. 显示效果
			display:none;元素隐藏不占位
			visibility:hidden;元素隐藏仍然占位
			opacity设置元素整体的透明度
			cursor:default/pointer
			list-style:none;
	
-------------------------------------------


day07
1. JavaScript
	1. 浏览器解释型语言,嵌套在HTML文件中交给浏览器解释执行
	2. 作用 : JS用于实现用户交互,网页动态效果,或者游戏开发
	3. 组成 :
			核心语法 ECMAScript
			内置对象
			外置对象 BOM/DOM
			------------------
			自定义对象
2. JS 使用
	1. 元素绑定事件
			事件 : 所有用户的行为(鼠标操作,键盘操作)都是事件
			语法 :
				将事件函数作为标签属性绑定到元素上
			例 :
				单击事件 : onclick
				<button onclick="JS代码"></button>
			JS语句 :
				alert(""); 网页弹框
				console.log("");
			注意 : 涉及标签嵌套,采用外双内单的写法
	2. 文档内嵌
			借助于<script type="text/javascript"></script>书写JS代码,标签内容即为JS语句
			注意 : 脚本标签可以书写在文档的任意位置,书写任意多次,不同的书写位置代码执行的结果会有所不同,并且有可能阻塞代码运行
	3. 外链
			创建外部的JS文件,以.js为后缀
			在HTML文件中借助<script src=""></script>引入
			注意 : <script></script>可以内嵌JS语句也可以引入JS文件,但是只能二选一,不能混用.
			href与src的区别 :
				href用于建立连接关系(<link href=""> <a href=""></a>)不会立马请求文件资源
				src用于设置网页运行不可或缺的内容,所以会直接请求src的文件资源
			JS输出语句 :
				console.log() 控制台输出
				alert()				警告框
				prompt("")		带有输入框的弹框
				document.write();在body中写入内容,可识别标签语法
			注意 :
				1. document.write()用于向body中动态添加内容,书写位置即为添加位置
				2. 元素绑定事件的方式书写document.write()相当于重写页面
			练习 :
				1. 为h2添加单击事件,点击时给出警告框,提示信息不限
					<h2 onclick="alert('')">点击</h2>
				2. 使用内嵌JS的方式,在h2的后面动态添加<p></p>,文本不限
					<h2 onclick="alert('')">点击</h2>
					<script>
						document.write("<p>动态添加</p>");
					</script>
				3. 外部JS文件中给出带输入框的弹框,提示输入年龄
					prompt("请输入年龄");
3. 基础语法规范
	1. JS是由语句组成,语句由关键字,变量,常量,运算符,方法组成.分号可以作为语句结束的标志,也可以省略
	2. JS严格区分大小写
			console.log() 正确
			Console.log() 错误
	3. 注释
		单行注释使用 //
		多行注释使用 /* */
4. JS中的变量与常量
	1. 变量
		作用 : 用于存储程序运行过程中可动态修改的数据
		语法 :
			使用关键var声明变量,自定义变量名
			var a;
			a = 100;
			var b = 200; //声明并赋值
			var m,n,k; //同时声明多个变量
			var j = 10,c = 20; //同时声明并赋值多个变量
		命名规范 : 
			1. 变量名,常量名,函数名,方法名自定义,可以由数字,字母,下划线,$组成,禁止以数字开头
			2. 禁止与关键字冲突(var const function if else for while do break case switch return class)
			3. 变量名严格区分大小写
			4. 变量名尽量见名知意,多个单词组成采用小驼峰
					"userName"
		使用注意 :
			1. 变量如果省略var关键字,并且未赋值,直接访问会报错
			2. 变量使用var关键字声明但未赋值,变量初始值为undefined
			3. 变量省略var关键字声明,已被赋值,可正常使用.影响变量作用域

	2. 常量 
		作用 : 存储一经定义就无法修改的数据
		语法 :
			必须声明的同时赋值
			const PI = 3.14;
		注意 :
			1. 常量一经定义,不能修改,强制修改会报错
			2. 命名规范同变量,为了区分变量,常量名采用全大写字母
		练习 :
			创建变量,定义半径
			创建常量,定义圆周率
			计算周长与面积 (乘法 : *)
		小数位操作
			保留n位小数 toFixed(n)
			使用 :
				var res = num.toFixed(2);
				num = num.toFixed(2);
5. 数据类型
	1. 基础数据类型
			1. number 数值类型
				1. 整数
					1. 十进制表示
						var a = 100;
					2. 八进制表示
						以0为前缀
						var b = 021; //17
						八进制转十进制,以8为底,从右向左依次从0开始表示次方数
					3. 十六进制
						以0x为前缀
						var c = 0x35;//5*16(0)+3*16(1) = 53
					使用 : 整数可以采用不同进制表示,在控制台输出时一律会按照十进制输出
				2. 小数
					1. 小数点表示
						var m = 1.2345;
					2. 科学计数法
						例 : 1.5e3
						e表示10为底,e后面的数值表示10的次方数
						1.5e3 等价于 1.5 * 10(3)
			2. string 字符串类型
				字符串 : 由一个或多个字符组成,使用""或''表示,每一位字符都有对应的Unicode编码
				语法 :
					var s = "100";
					var s1 = "张三";
				方法 :
					1. charCodeAt(index)
						(字符串会为每一位字符分配下标,从0开始)
						获取指定位置字符的Unicode码
						例 :
							s1.charCodeAt(1);
					2. 已知中文Unicode码值,转换为中文显示:
						1. 中文在计算机中使用十六进制表示
								toString(16) 转换16进制
						2. 手动添加\u转义,转换成中文字符
								"\u5f20" -> 在浏览器中显示为"张"
					3. 中文的范围
						"\u4e00" ~ "\u9fa5"
			3. boolean 布尔类型
					只有真和假两个值
					var isSave = true;
					var isChecked = false;
					布尔值与number值可以互相转换
						true = 1
						false = 0
			4. undefined 
					特殊值,变量声明未赋值时显示undefined
					访问对象不存在的属性,也会显示undefined
			5. null 空类型
					解除对象引用时使用null,表示对象为空
	2. 引用数据类型
			对象 函数
	3. 检测数据类型
		 typeof 变量或表达式
		 typeof (变量或表达式)
6. 数据类型转换
	不同类型的数据参与运算时,需要转换类型	
	1. 自动类型转换(隐式)
		1. 字符串与任意数据类型进行 "+"运算,一律表示字符串的拼接.
			会将非字符串数据自动转为字符串,然后做拼接,最终结果为字符串
		2. number与Boolean结合运算
			自动将布尔值转换成number,再进行数学运算
			true = 1;false = 0;
		3. Boolean与Boolean结合运算
			统一转换为number进行运算
	2. 强制类型转换
		1. 转换字符串类型
			方法 : toString()
			返回转换后的字符串
			例 :
				var a = 100;
				a = a.toString(); //"100"
				var b = true;
				b = b.toString(); //"true"
		2. 转换number类型
			1. Number(param)
					参数为要进行数据类型转换的变量或值
					返回转换后的结果:
						如果转换成功,返回number值
						如果转换失败,返回NaN,(Not a Number)
					注 : 只要数据中存在非number字符,一律转换失败
			2. parseInt(param)
					参数为要解析的数据
					作用 : 从数据中解析整数值
					过程 :
						1. 如果参数为非字符串类型,会自动转成字符串
						2. 从左向右依次对每一位字符转number,转换失败则停止向后解析,返回结果
			3. parseFloat(param)
					作用 : 提取number值
					例 : 
						parseFloat(35.5);
						parseFloat("a123.5"); //NaN
						parseFloat("12.3.5") //12.3
	7. 运算符
		1. 赋值运算符 =
			将 = 右侧表达式的值赋给左边的变量
			var a = 100;
		2. 算数运算符
			+ - *(乘) /(除) %(取余)
			1. 字符串使用 + 一律表示拼接,返回最终字符串结果
			2. 字符串参与 - * / %运算,一律自动将字符串转换成number再进行数学运算 (Number())
			3. 非number类型参与算数运算时,一律自动转number
			注意 :
				1. 操作数无法转换number时,变成NaN参与运算,只要操作数中出现NaN,结果一律为NaN
					"10a" - "10" ; -> NaN - 10 结果为NaN
				2. undefined参与运算,结果也为NaN
				3. null可以转换为number,为0,正常参与运算
		3. 自增和自减运算符 ++  --
			作用 : 在当前变量值的基础上进行 +1 或 -1操作
			使用 :
				1. 单独与变量结合,做前缀或后缀没有区别
						var a = 5;
						a ++; // a = a + 1;
						++ a;
						console.log(a);
				2. 与其他运算符结合使用时,前缀表示先+1,后缀表示后+1
			练习 :
				var n = 5;
				var r = n++ + ++n + n++ + ++n + n;
				解 :
					r1 = n++; //r1=5,n=6
					r2 = ++n; //r2=7,n=7
					r3 = n++; //r3=7,n=8
					r4 = ++n; //r4=9,n=9
					r5 = n;		//r5=9
		4. 复合运算符
			 += -= *= /= %=
			 例 :
				var a = 10;
				a += 1; //a = a + 1;
				a -= 5; //a = a - 5;
		


						
				

				
			

			
















			