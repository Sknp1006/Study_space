复习 :
1. 数据类型
	number string boolean undefined null
2. 数据类型转换
	1. 自动转换
		1. 字符串使用+运算,表示字符串的拼接
		2. 字符串参与 - * / % 运算,自动对操作数转number,再进行数学运算
		3. 非number类型,先自动转number,再进行运算
	2. 强制转换
		1. 转换字符串
			toString()
		2. 转换number
			1. Number(param)
					整体转number
			2. parseInt(param)
				 parseFloat(param)
				 例 :
					parseInt("true") //NaN
					parseInt("a123")
					parseInt("123.56")//123
	-------------------------------
day 08
1. 运算符
	1. 赋值运算符 =
	2. 算数运算符 + - * / %(取余)
	3. 复合运算符 += -= *= /= %=
			例 :
				var a = 10;
				a += 20; //a = a + 20;
	4. 自增,自减  ++ --
			变量在自身基础上进行+1 或 -1 操作
			使用 :
				1. 单独与变量结合,做前缀和后缀没有区别
						var a = 10;
						a--; // a = a - 1;
						--a; //
						console.log(a);
				2. 与其他运算符结合使用.前缀就先+1/-1,后缀就后+1/-1
						var a = 10;
						var r1 = --a; //9,9
						var r2 = a--; //9,8
	5. 关系运算符/比较运算符
			> < 
			>= <=
			==(相等) !=
			===(全等) !==
		1. 关系运算符用来判断表达式之间的关系,结果永远是布尔值 true/false
		2. 使用
			1. number 与其他类型的比较
					将非number类型自动转换为number值,进行大小比较
					如果转换失败,则变成number与NaN的比较,结果永远是false
			2. 字符串与字符串之间的比较
					依次比较每位字符的Unicode码,只要某位字符比较出结果,就返回最终结果
			3. 布尔值与其他类型之间的比较
					先转换number,进行值的比较
					var res1 = true > false; //true
					var res2 = true > "10";//1 > 10 false
					var res3 = true > undefined;//1 > NaN false
					var res4 = true > null;//true
					var res5 = true > 10; //false
		3. 相等与全等
			相等 : 不考虑数据类型,只做值的比较(包含自动类型转换)
			全等 : 不会进行数据类型转换,要求数据类型一致并且值相等才判断全等
			例 :
				"10" == 10; //true
				"10" === 10;//false
				--------------------
				"10" != 10;//false 操作数不相等才为true
				"10" !== 10;//true 操作数类型或值不一致,都为true
	6. 逻辑运算符 && || !
			1. && 逻辑与
					表达式同时成立,最终结果才为true;全1则1
					例 :
						5>3 && 1>10 //false
			2. || 逻辑或
					表达式中只要有一个成立,最终结果即为true; 有1则1
					例 :
						5>3 || 1>10 //true
			3. ! 逻辑非
					对已有表达式的结果取反
						!(5>3) //false
						!(1>10)//true
						!5>3	 //false>3等价于0>3
						!5>3 || 1>10 //false
						!(5>3) || 1>10 //false
						!(5>3 || 1>10) //false
						注意 : 
							1. 除零值以外,所有值都为真
									!5 // !true
							2. 运算方向遵循从左向右,可以使用括号表示表达式
			练习 :
				1. 接收用户输入的年份,检测数据类型
						var year = prompt("");
					 判断该年是否是闰年
						闰年 : 能被4整除不能被100整除
									 或能被400整除
				2. 接收用户输入的一个字符
					 判断字符类型
						是数字吗? 
						是字母吗?
						是中文吗?
	7. 位运算符 
			数据在计算机中以二进制形式存储,对二进制位的操作称为位运算
		1. & 位与
				对二进制的每一位进行与操作(全1则1)
				例 :
					3 & 5 = 1
						011
					&	101
					--------
						001
				使用 : 位与运算可以用来判断整数的奇偶
							 操作数与1做位与运算,结果为1,操作数为奇数;结果为0说明操作数为偶数
							 例 :
								 3 & 4 //011 & 100 
								 3 & 1 //011 & 001 = 001
								 4 & 1 //100 & 001 = 000
		2. | 位或
			对二进制位做位或(有1则1)
			例 :
				3 | 5 = 7
					011
				|	101
				--------
					111	
		3. ^ 异或
				对二进制位操作,相同则为0,不同则为1
			例 :
				3 ^ 5 = 6
					011
				^	101
				--------
					110
			使用 :
				var a = 10; b = 20;
				var c = a;
				a = b;
				b = c;
				使用异或v可以在不借助第三方变量的情况下互换变量的值
				例 :
					var a = 3,b = 5;
					a = a ^ b; //a = 6
					b = a ^ b; //110 ^ 101 = 011  3
					a = a ^ b; //110 ^ 011 = 101  5
	8. 三目运算符
			语法 :
				表达式1 ? 表达式2 : 表达式3;
			过程 :
				判断表达式1是否成立,返回布尔值
				如果表达式1成立,执行表达式2;
				如果表达式1不成立,执行表达式3;
			例 :
				var a = 90;
				var res = a >= 90 ? "优秀" : "<90";
				a >=90 ? "优秀" : a >= 80 ? "良好" : "<80";
			练习 :
				1. 接收用户输入的成绩,判断成绩情况
				2. 身体指数 bmi
						接收用户输入的身高(m),体重(kg)
						bmi = 体重 / (身高 * 身高)
						保留两位小数
						bmi > 23.9 需要减肥了
						18.5 < bmi < 23.9 健康
						< 18.5     偏瘦
2. 流程控制
	1. 控制代码的执行顺序
	2. 分类 :
		1. 顺序结构
				从上到下依次执行代码语句
		2. 分支(选择)结构
			1. if语句
				1. if(条件表达式){
						表达式成立时执行的代码段
					}
					注意 : 
						除零值以外,其他值都为真
						以下为假值false
						if(0){}
						if(0.0){}
						if(""){} 空字符串
						if(undefined){}
						if(NaN){}
						if(null){}
					特殊写法 :
						{}可以省略,一旦省略,if语句只控制其后的第一行代码
				2. if(条件表达式){
						//条件成立时执行
					 }else{
						//条件不成立时选择执行
					 }
				3. 多重分支
						if(){
						
						}else if(){
						
						}else if(){
						
						}...else{
						
						}
				练习 :
					1. 使用if语句实现成绩判断
					2. 日期计算器
							接收用户输入的年,月,日
							判断当日是该年的第几天
			2. switch语句
				语法 :
					switch(value){
						case 值1 :
							//value与值1匹配全等时,执行的代码段
							break; //结束匹配
						case 值2 :
							//
							break;
						case 值3 :
							//
							break;
						...
						default:
						//所有case匹配失败后默认执行的语句
						break;
					}
				使用 :
					1. switch语句用于值的匹配,case用于列出所有可能的值;只有switch()表达式的值与case的值匹配全等时,才会执行case对应的代码段
					2. break用于结束匹配,不再向后执行;可以省略,break一旦省略,会从当前匹配到的case开始,向后执行所有的代码语句,直至结束或碰到break跳出
					3. default用来表示所有case都匹配失败的情况,一般写在末尾,做默认操作
					4. 多个case共用代码段
							case 值1:
							case 值2:
							case 值3:
								//以上情形都会执行的代码段
					练习 :
						使用switch改版日期计算器
		3. 循环结构
				1.根据条件,重复执行某段代码
				2.分类
					1. while循环
							定义循环变量;
							while(循环条件){
								条件满足时执行的代码段
								更新循环变量;
							}
						过程 :
							1. 定义循环变量
							2. 判断循环条件
							3. 条件成立,执行循环体{}
							4. 更新循环变量
							5. 重复2-3-4,直至条件不满足,结束循环
						练习 :
							1. 控制台输出1-100的整数
							2. 求1-100的和
							3. 输出1-100之间所有3的倍数
							4. 改版日期计算器
					2. do-while循环
						语法 :
							do{
								循环体;
								更新循环变量
							}while(循环条件);
						过程 :
							1. 定义循环变量
							2. 执行循环体,更新循环变量
							3. 判断循环条件
							4. 条件成立,执行循环体,重复2-3,直至条件不成立
						与while循环的区别 :
							1. while循环先判断循环条件,条件成立才执行循环体
							2. do-while循环不管条件是否成立,先执行一次循环体
					3. for循环
						语法 :
							for(定义循环变量;循环条件;更新循环变量){
								循环体;
							}
						循环控制 :
							1. break 强制结束循环
							2. continue 结束当次循环,开始下一次循环
						循环嵌套 :
							在循环中嵌套添加其他循环
							for(var i = 1; i < 10; i ++){
								for(var j = 1; j < 5; j ++){
								  //循环体
								}
							}
						作业 :
							1. 循环接收用户输入,在控制台中输出,直至用户输入"exit",结束循环
							2. 接收用户输入的年,月,日,计算当日是星期几
									已知 1990年1月1日是星期一
											 1900年1月1日是星期一
							3. 九九乘法表
							4. 控制台打印
										*
									 ***
									*****
								 *******
								*********

						


						
						

						
		

				
				


		













