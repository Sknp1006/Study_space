上次内容:
1.子查询: 一个查询语句中嵌套另一个语句
  select * from acct where balance > (
      select avg(balance) from acct
  );
2.连接查询: 多个表中查询数据,产生一个结果集
  - 当想查询的结果来自不同的表时,用到联合查询
  - 笛卡尔积: 集合的乘积.查询结果不恰当,查询结果容易产生笛卡尔积
  - 分类: 内连接、外连接
    内连接: 没有关联的数据不显示
    外连接: 
      左连接:以左表为主表,全部显示,右表来关联
      右连接:以右表为主表,全部显示,左表来关联
3.权限管理
  - 用户类,库管理类, 表管理类, 数据操作类
  - 授权语法:
    grant 权限列表 on 库.表
    to 用户@客户端 
    identified by 'mima'
    with grant option

   









今天内容
1.锁
  1)锁: 对数据库的控制权
  2)目的: 解决多个工作单元并发操作数据的正确性问题
  3)分类: 
    a)锁分类:
      - 读锁(共享锁): 加锁后,可以读数据,但是不能修改
      - 写锁(排他锁): 加锁后,不能进行读写
    b)锁粒度
      - 行级锁(细粒度): 锁定一行,并发效率高,控制较为复杂,消耗资源多
      - 表级锁(粗粒度): 锁定整张表,并发效率低,控制简单,消耗资源少
2.存储引擎
  1)什么是存储引擎: 表的存储方式,包括:存储机制、索引机制、锁定方式
  2)基本操作
    - 查看mysql支持的存储引擎:show engines;
    - 查看某个表的存储引擎: show create table 表名
    - 建表时指定存储引擎:
      create table t1(
        name varchar(32)
      )engine=InnoDB;
    - 修改表的存储引擎
      alter table t1 engine=MyISAM;
  3)常用存储引擎的特点:
    a)InnoDB
      - 支持数据库事务,行锁定,外键(FK)
      - 共享表空间(多个表之间使用同一个表空间)
      - 构成: .frm 和 .ibd
        .frm:表结构和索引
        .ibd:表记录

        *通过show global variables '%datadir%'
        查看musql表存储的文件目录
      - 适用场合
        更新密集操作的表,并发效率较高
        要求支持数据库事务
        支持外键约束
        要求支持自动增长的auto_increment字段
    b)MyISAM
      - 支持表级锁定,不支持事务,不支持外键,不支持行锁定,访问速度较快
      - 独享表空间
        .frm 表结构
        .myd 表数据
        .myi 表索引
      - 使用场合:
        查询操作较多
        数据一致性要求较低(不支持事务)
        没有外键的约束
    c)Memory(内存表):
      - 表结构存储在磁盘上,但是数据存储在内存中
      - 访问速度快
      - 占内存
      - 文件:
        .frm 表结构
      - 服务(或机器)重启后,表中数据丢失
      - 适用场合:
        数据量少,访问速度要求极快,访问频率高,
        数据丢失后不会造成影响
3.E-R模型:实体-关系模型
  a)实体(Entry):现实中可以区分的事物称之为实体
  b)关系(Relationship):实体之间的联系
    - 一对一
    - 一对多
    - 多对多
  c)属性:实体所具有的数据特征
  d)E-R图:用图形化方式,表达实体间的关系
    矩形:实体
    椭圆:实体的属性
    菱形:实体间的关系
  e)画出客户账户的E-R图(见ER图.pptx)

4.使用python访问MySQL数据库
  1)pymysql库: Python语言访问MySQL接口
    - 在线安装: sudo pip3 install pymysql
    - 离线安装: 第一步:下载安装包(下载地址:https://pypi.org/project/PyMySQL)
               第二步:解压包(tar -zxvf 包名)
               第三步:运行安装脚本python3 setup.py install
    - 验证方式: import pymysql
  2)PyMySQL访问mysql的流程
    第一步:导入pymysql模块
    第二步:连接数据库
    第三步:创建游标对象(cursor),通过调用数据库连接对象获得游标
    第四步:利用cursor对象执行SQL语句
    第五步:如果执行了增删改,提交事务,出错则回滚
    第六步:关闭游标对象
    第七步:关闭数据库连接对象
  3)PyMySQL模块的主要方法
    - connect: 连接数据库
      参数: host      服务器地址
           port      服务器端口(默认端口3306)
           user      用户名
           passwd    密码
           db        数据库名称
           charset   指定编码格式
    - 连接对象支持的方法:
      cursor()   获取游标
      commit()   提交事务
      rollback() 回滚事务
      close()    关闭游标
    - 游标对象支持的方法
      execute(sql)  执行sql语句
      fetchall()    取得查询结果集中的所有数据
      fetchone()    取得查询结果集中的一笔数据
      fetchmany(size) 取得指定笔数的数据
      close()       关闭游标对象

      属性:
        rowcount  返回修改影响的行数
  4)增删改查示例:
    示例1:查询
        query.py
    示例2:插入
        insert.py
    示例3:删除
        delete.py
    示例4:修改
        update.py
5.SQL语句优化
  1)在经常查询、排序的字段上建立索引
  2)尽量少使用不等于条件判断, 不等于判断会放弃使用索引
  3)少使用null判断、null值会放弃使用索引
  4)条件判断,少使用or做连接, in, not in操作,速度慢
  5)模糊查询避免%号前置
  6)查询时如果select *, 直接写成字段名会提高效率
  7)尽量少在where子句中,使用字段进行运算
    例如: select * from acct where balance / 2 > 5000
  8)数值类型的字段, 进行条件比较时, 一般比字符串效率高