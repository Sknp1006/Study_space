1.概述
  1)什么是数据库
    a)数据库:根据某种数据模型,对数据进行科学,高效,存放,读取,管理的仓库
    b)数据库管理系统(DataBase Management System)简写DBMS,位于操作系统
      和应用程序之间的一套软件系统,专门用于数据管理
    c)数据库系统:一般统称,包含DBMS硬件还包括应用程序,人员角色(用户, DBA)
    d)应用场合
      - 几乎所有的软件系统
      - 一种重要的基础软件
    e)主流DBMS系统
      Oracle           Oracle, MySQL
      微软              SQL server 
      IBM              DB2
      Sybase           Sybase
      加州大学伯克利分校  PostgreSQL
  2)数据管理的三个阶段
    a)人工管理阶段
      - 数据,程序绑定在一起
      - 管理简单
      - 缺点:数据不能共享,不能单独保存
    b)文件系统管理
      - 数据保存在文件中,单独存放到外部存储设备
      - 优点:能够实现数据共享
            数据和程序分离
      - 缺点:数据联系较弱,数据冗余,数据的一致性差
    c)数据库管理阶段
      - 单独用一套软件,专门进行管理数据
      - 优点:数据库独立共享,低冗余
            提供了方便友好的接口
            更强的安全性和可靠性
            提供丰富的工具(性能优化工具, 备份恢复工具, 查询, 权限管理)
      - 缺点:付出额外的软硬件成本,人力成本
  3)数据库概念模型
    a)层次模型
    b)网状模型
    c)关系模型
      - 当前主流模型
      - 使用二维表(关系)表示数据,数据之间的联系
        (理解, 记忆)
    d)非关系模型
  4)关系术语(重点)
    - 实体:现实中可以区分的事物
    - 关系:规范的二维表,每一列都不可再分
    - 元组:表中的一行叫一个元组,表示一个实体信息
    - 属性:表中的一列,描述一个实体的某个数据值
        也称为"字段"
    - 键(key):可以唯一区分实体的属性,称为键
    - 主键(Primary Key):多个键中选取一个作为主键,从逻辑上唯一区分一个实体
          非空, 补重复
  5)关系模型的优点:
    - 建立在严格的数学理论之上
    - 概念简单,单一,结构清晰能够用简单的模型表达出复杂的数据关系

2.MySQL简介
  1)开源的,使用广泛的关系型数据库
    瑞典MySQL AB公司开发,后被Oracle收购
    原作者开发MariaDB,与MySQL兼容
  2)特点:
    - 开源,成本低
    - 体积小,速度快
    - 支持Unix/Linux,Windows等主流操作系统
    - 使用C/C++编写,可移植性强
    - 支持丰富的编程语言接口,C , C++, Python, Java, PHP
  3)主要版本
    - 社区版:开源免费,不提供官方的支持
    - 企业版:付费版,提供技术支持
    - 集群版:开源免费版,开以将多台服务器封装成一个逻辑上的服务器
    - 高级集群版:付费版
  4)安装配置
    1. Ubuntu ：
        1. 安装服务端
          sudo apt-get install mysql-server
          sudo apt-get install libmysqlclient-dev
        2. 安装客户端
          sudo apt-get install mysql-client
        3. ubuntu 软件更新
          1. sudo apt-get update
            访问源列表中的所有网址，读取软件列表，保存
            到本地（/var/lib/apt/lists/）
          2. sudo apt-get upgrade
            把本地已安装软件与刚下载的软件列表进行对比
            如果当前软件版本低，则更新
          3. 修复依赖关系
            sudo apt-get -f install
        查看是否安装成功:netstat -an | grep 3306
          如果3306是listen状态,则成功
        管理脚本:sudo /etc/init.d/mysql status
          如果看到的是Running状态,则成功
    2. windows :
      下载安装包 xxx.msi
    3. Mac :
      下载安装包 8.0
  5)MySQL服务启动,停止
    - 启动:sudo /etc/init.d/mysql start
    - 停止:sudo /etc/init.d/mysql stop
    - 重启:sudo /etc/init.d/mysql restart
    - 查看状态:sudo /etc/init.d/mysql status
  6)客户端与服务器
    - 服务器:mysqld (d表示Daemon简写,服务器进程)
    - 客户端:mysql
    使用客户端连接服务器:
      命令:mysql -h服务器地址 -u用户名 -p用户密码
      示例:mysql -hlocalhost -uroot -p123456
      说明:
        mysql         运行mysql客户端程序
        -hlocalhost   运行mysql客户端程序
        -uroot        表示使用root用户登录连接
        -p123456      表示root用户的密码是123465
  
  备注:如果连接本机, -hlocalhost可以省略

3.MySQL操作
  1)SQL语言:结构化查询语言(Structured Query Language)

  2)功能:用来对DBMS系统进行操作
        库,表管理
        数据增,删,改,查(CRUD)

  3)大小写不敏感
    不支持Tab自动补齐
    以分号结束
    使用\c可以废弃写错了的语句0

  4)库操作
    - 查看库:show databases;
    - 创建库:create database 库名称 default charset=字符集
      e.g. 创建名称为bank的库,使用utf-8字符集
      create database bank default charset=utf8
    - 进入/切换库:use 库名称;
      e.g. 进入或切换到bank库: use bank;
    - 查看当前所在库:select database();
    - 查看库:show databases;
    - 删除库:drop database 库名称;
      e.g. 删除bank库:drop database bamk;

  5)数据库构成
    - 库中包含表、视图(View)、索引(Index)、触发器(Trigger)、存储过程(SP)、用户
    - 命名规范:
      由字符、数字、下划线构成,不能全是数字
      库名称区分大小写
      库名必须唯一
      避开MySQL的关键字

  6)表操作(重点)
    a)创建表
      create table 表名称(
          字段1  类型(长度)  约束,
          字段2  类型(长度)  约束,
          字段3  类型(长度)  约束,
          ...
      )default charset=字符集;
    e.g. 创建acct(账户)表
      第一步:如果没有bank库,先创建库
      第二步:使用use命令,进入bank库
      第三步:执行建表SQL语句:
      create table acct(
          acct_no varchar(32),
          acct_name varchar(128)
      )default charset=utf8;
      第四步:使用show tables命令查看是否成功
    b)查看表结构:desc 表名称
      e.g. 查看acct表结构
      desc acct;
    c)查看创建表的SQL语句:show create table 表名
      e.g. 查看acct建表SQL语句
      show create table acct;
    d)删除表:drop table 表名
      e.g. 删除acct表
      drop table acct;
  7)数据操作(重点)
    首先,重新创建acct表
    create table acct(
        acct_no varchar(32), -- 帐号,字符串,32个字节
        acct_name varchar(128), -- 户名,字符串,128字节
        cust_no varchar(32), -- 客户编号,字符串,128字节
        acct_type int, -- 账户类型,整数型
        reg_date date, -- 开户日期,日期类型
        status int, -- 账户的状态,整数型
        balance decimal(16,2) -- 数字类型
                          -- 最长16位,2位小数
    )default charset=utf8;
    *需要注意的地方:
      语句中,除了注释部分以外,不能出现中文字符
      括号必须匹配,并嵌套正确,最好成对书写
      date容易写成data
    注意其他的拼写错误
    最后的分号不要忘记
    注释的两个横线后面必须加空格
    a)插入数据
      e.g. 向acct表插入一笔数据
      insert into acct values('622345000001', 'Jerry', 'C0001', 1, now(), 1, 1000.00);
    *需要注意的地方
      除字符串以外,不能由中文符号
      字段的个数、类型、顺序必须和表结构一致
      字符串类型的数据要使用单引号引起来
      now()是一个系统函数,取数据库当前日期
      每个值之间使用英文逗号分隔

      e.g. 使用一个SQL语句插入多笔数据
      insert into acct values
      ('622345000002', 'Tom', 'C0002', 1, now(), 1, 2000.00),
      ('622345000003', 'Dekie', 'C0003', 1, now(), 1, 3000.00),
      ('622345000004', 'Dokas', 'C0004', 1, now(), 1, 4000.00);
      
      e.g. 指定字段插入
      insert into acct(acct_no, acct_name) values('622345000005', 'Emma');
    
    b)查询数据
      - 格式:
        select * from 表名 [where 查询条件]
        select 字段列表 from 表名称 where 查询条件
      e.g. 查询所有数据
        select * from acct;
      
      e.g. 指定查询部分字段
        select acct_no, acct_name, balance from acct;
      
      e.g. 查询指定的字段,为字段指定别名
        select acct_no "帐号", 
               acct_name "户名",
               balance as "余额"
        from acct;
      
      e.g. 查询时,使用字段的值进行计算,查询帐号余额时,显示万元
        select acct_no "帐号", 
               acct_name "户名",
               balance / 10000 as "余额(万元)"
        from acct;
      
      e.g. 带一个条件的查询
        select * from acct where acct_no = '622345000001';
      
      e.g. 带两个条件的,两个条件同时满足
        select * from acct where acct_no = '622345000001' and
         acct_name = 'Jerry';
        
      e.g. 带两个条件的查询,两个条件满足一个
        select acct_no, acct_name, balance
        from acct
        where acct_name = 'Jerry'
          or acct_name = 'Tom';

4.MySQL数据类型:
  1)主要的数据类型
  - 数值类型:整数、浮点数
  - 字符类型
  - 日期时间:日期、时间
  - 枚举类型:值相对较少、范围较固定
  2)数值类型
  - 整数:TINYINT(1字节), SMALLINT(2字节)
        INT(4字节), BIGINT(8字节)
  - 浮点数:Decimal  长度是可变的  精确数字  可指定小数的位数
          Decimal(16,2)表示最长16位,小数2位
  3)字符串类型
  - char: 定长字符串(最大能保存255字符,如果长度不足的时候,使用空格填充,超过规定长度则无法传入)
          性能上要好于varchar类型
  - varchar: 可变长字符串(最大长度65535个字符,按照实际大小分配存储空间,字符超过最大长度,则无法写入)
          性能上低于char类型
  - text: 大文本类型,字符数量大于65535时使用
  4)枚举类型:enum, set
  - enum: 从给定的范围选取一个
  - set: 从给定的范围选取一个或多个
    e.g. enum, set类型
      create table enum_test(
          name varchar(32),
          sex enum('boy', 'girl'), -- 从两者选一
          course set('music', 'dance', 'paint')
      );
    e.g. 在枚举范围内可以正常插入
      insert into enum_test
      values('Jerry', 'girl', 'music,dance');
    e.g. 在枚举范围之外,插入报错可以插入
      insert into enum_test
      values('Jerry', 'girl', 'music,football');

作业:
    1.复习、理解以下概念  关系数据库、数据管理的三个阶段及特点
      元组、属性、键、主键、
    2.练习和实际操作
      1）MySQL的安装、启动、停止、登录
      2）库操作：建库、查看、进入/切换
      3）表操作：新建、查看
      4）数据操作：插入、查询
      5）理解和正确使用所讲的数据类型