课程：MySQL关系型数据库
进度：day2

上次内容回顾
1.基本概念
  a)数据按照一定的数据模型，进行高效的数据管理、存放的数据仓库
  b)数据库管理系统(DBMS):专门用于数据管理的软件系统,提供了丰富的功能、工具
    - 数据的高效存取
    - 安全性、可靠性工具
    - 各种语言提供接口
    - 优化工具
    - 其他工具
  c)数据库系统:数据库软硬件、应用程序、人员/角色(DBA)
  d)数据管理的三个阶段:人工管理阶段、文件系统阶段、数据库管理阶段
  e)关系数据库:使用关系(规范的二维表)来表示数据、数据之间的联系
  f)重要概念:
    实体:现实中可以区分的事物
    关系:二维表,包括行和列,每个属性都不可再分
    元组:关系中的一行,一个元组表示一个数据、一个实体
    属性:实体的数据描述
    键:唯一可以区分实体的属性(或属性组合)
    主键:多个键中选取一个作为主键,从逻辑上唯一确定一个实体
        一个实体,要求非空、不重复
2.基本操作
  1)服务:/etc/init.d/mysql start | stop | restart | status
  2)查看库:show databases;
    - 创建库:create database 库名称 default charset=字符集
    - 进入/切换库:use 库名称;
    - 查看当前所在库:select database();
    - 查看库:show databases;
    - 删除库:drop database 库名称;
  3)表操作(重点)
    a)创建表
      create table 表名称(
          字段1  类型(长度)  约束,
          字段2  类型(长度)  约束,
          字段3  类型(长度)  约束,
          ...
      )default charset=字符集;
    b)查看表结构:desc 表名称
      e.g. 查看acct表结构
      desc acct;
    c)查看创建表的SQL语句:show create table 表名
      e.g. 查看acct建表SQL语句
      show create table acct;
    d)删除表:drop table 表名
      e.g. 删除acct表
      drop table acct;
  4)数据管理
    a)插入:insert into acct values(值1, 值2, ...);
        insert into acct values('622345000001', 'Jerry', 'C0001', 1, now(), 1, 1000.00);
        insert into acct values
        ('622345000002', 'Tom', 'C0002', 1, now(), 1, 2000.00),
        ('622345000003', 'Dekie', 'C0003', 1, now(), 1, 3000.00),
        ('622345000004', 'Dokas', 'C0004', 1, now(), 1, 4000.00);
        insert into acct(acct_no, acct_name) values('622345000005', 'Emma');
    b)查询:select 字段列表 from 表名 where 条件
        select * from acct
        where acct_no = '0001'
          and acct_name = 'Jerry'
3.数据类型
  - 数值型:整数、浮点数
  - 字符:char(定长), varchar(变长)
  - 枚举:enum, set

今天的内容
1.日期时间类型
  - 日期:DATE 范围'1000-01-01'~'9999-12-31'
  - 时间类型:Time, 时分秒
  - 日期时间类型:DATETIME
      '1000-01-01 00:00:00'~'9999-12-31 23:59:59'
  - 时间戳:TIMESTAMP, 记录某个事件发生的时间点
  - 日期时间函数:
      now()  取当前系统时间
      sysdate()  取当前系统时间(在Oracle里)
      curdate()  取当前系统日期
      curtime()  取当前系统时间
      year()     取指定日期中的年份
      month()    取指定日期中的月份
      day()      取指定日期中的天
      date()     取指定日期时间中的年月日
      time()     取指定日期时间中的时分秒
      示例:
          select now(),sysdate();       取当前系统日期时间
          select curdate(),curtime();   取当前日期时间
          select year(now()), month(now()), day(now()); 先取当前系统时间,再取出年月日
          select date(now()), time(now()); 先取出系统日期时间,再取出日期,时间
2.数据操作(更新、删除、重点)
  1)更新
    - 语法格式:
      update 表名称
        set 字段1 = 值1,
            字段2 = 值2,
            ......
      where 条件表达式;
    - 示例:
      e.g. 将账户622345000001状态修改为2
      update acct set status = 2 where acct_no = '622345000001';
      e.g. 将账户622345000001余额增加10000
      update acct set balance = balance + 10000 where acct_no = '622345000001';
    - 注意事项:
        修改的值要和字段的值、长度相匹配
        修改时要使用条件限定,如果不限定则修改所有
        如果没有满足条件的数据,则修改笔数为0
    - 练习:编写注销帐号的SQL语句(修改状态,余额为0)
        update acct set balance = 0, status = 4 where acct_no = '622345000002';
  2)删除记录
    - 语法格式:
      delete from 表名称 where 条件表达式;
      e.g. 删除帐号为622345000003的账户信息
      delete from acct where acct_no = '622345000003';
3.运算符操作
    1)比较操作符: >,<,>=,<=,<>或!=
        e.g. 查询账户余额小于5000的账户(未注销)
        select * from acct where balance < 5000, status <> 4;
        e.g. 查询账户状态不为2的账户
        select * from acct where status <> 2;
    2)逻辑运算符:and,or
        - and: 多个条件同时满足
        - or: 满足多个条件其中的一个
        e.g. 查询余额大于0且状态为2的账户
        select * from acct 
        where balance > 0 
            and status = 2;
        e.g. 查询状态为1或状态为2的账户信息
        select * from acct
        where status = 1
            or status = 0;
        e.g. 多个条件组合
        select * from acct
        where (acct_no = '622345000001' or acct_no = '622345000002')
            and status = 1;
    3)范围比较
        - in: 在某个范围(集合)中
        - not in: 不在某范围(集合)中
        - between...and...:在...与...之间
        e.g. 使用IN查询帐号在某个指定范围内的账户信息
        select * from acct
        where acct_no in('622345000001', '622345000002');
        e.g. 使用between查询余额在某个范围内的账户信息(包含两个边界值)
        select * from acct
        where balance between 3000 and 5000;
    4)模糊查询: like
        - 格式:where 字段名称 like '通配符的字符串'
        - 通配符_匹配单个字符串
        - 通配符%表示匹配任意个字符
        e.g. 查询以D开头的户名所有的账户 
        select * from acct where acct_name like 'D%';
        注:'D%'表示匹配以D开头的任意个字符串
            'D_'表示匹配以D开头的一个字符串
    5)空/非空判断(null是一个特殊值,不能用等号判断)
        - 判断空: is null
        - 判断非空: is not null
        e.g. select * from acct where acct_type is null;(空)
            select * from acct where acct_type is not null;(非空)
        e.g. 查询客户编号为空串或null的账户
        select * from acct
        where cust_no = ''   -- 判断空字符串
        or cust_no is null;  -- 判断空值
4.查询子句:排序]、分组、筛选
  1)排序: order by子句
    - 作用: 对查询结果按照某个字段值进行排序
    - 格式: order by排序字段[ASC/DESC]
           ASC表示升序
           DESC表示降序
           不写排序依据,默认为升序
    - 示例:
      e.g. 查询账户信息,按照账户余额升序排列
      select * from acct order by balance asc;---DESC
      e.g. 查询账户信息,按照账户类型升序、金额降序
      select * from acct
          order by acct_type asc, balance desc;
  2)限制: limit子句
    - 作用: 限定显示的查询结果笔数
    - 格式: limit n 只显示前面的n行
           limit m,n 从m笔开始显示,总共显示n笔
                     (通常用作分页查询)
    - 示例:
      e.g. 查询账户余额最大的前三个账户
      select acct_no, acct_name, balance
      from acct 
      order by balance desc -- 倒序排列
      limit 3;  -- 限定显示3笔
      e.g. 从第一笔开始, 显示3笔数据(下标从0开始)
      select acct_no, acct_name, balance
      from acct
      order by balance desc
      limit 0,3;
      注: 经常利用limit m,n子句进行查询分页处理
        m表示起始的行数(从0开始)
        n表示每页有多少行
        如何实现分页:
            如果每页三笔
            m = (页数 - 1) * 每页几笔
            n = 每页多少笔(3)  
  
    +--------------+-----------+----------+
    | acct_no      | acct_name | balance  |
    +--------------+-----------+----------+
    | 622345000001 | Jerry     | 11000.00 |
    | 622345000007 | Dokas     |  8000.00 |
    | 622345000006 | Tom       |  7000.00 |
    | 622345000008 | John      |  5500.00 |
    | 622345000004 | Dokas     |  4000.00 |
    | 622345000003 | Dekie     |  3000.00 |
    | 622345000002 | Tom       |     0.00 |
    | 622345000005 | Emma      |     NULL |
    +--------------+-----------+----------+

    +--------------+-----------+----------+
    | acct_no      | acct_name | balance  |
    +--------------+-----------+----------+
    | 622345000001 | Jerry     | 11000.00 |
    | 622345000007 | Dokas     |  8000.00 |
    | 622345000006 | Tom       |  7000.00 |
    +--------------+-----------+----------+
    +--------------+-----------+----------+
    | acct_no      | acct_name | balance  |
    +--------------+-----------+----------+
    | 622345000001 | Jerry     | 11000.00 |
    | 622345000007 | Dokas     |  8000.00 |
    | 622345000006 | Tom       |  7000.00 |
    +--------------+-----------+----------+
    +--------------+-----------+----------+
    | acct_no      | acct_name | balance  |
    +--------------+-----------+----------+
    | 622345000001 | Jerry     | 11000.00 |
    | 622345000007 | Dokas     |  8000.00 |
    | 622345000006 | Tom       |  7000.00 |
    +--------------+-----------+----------+

    3)聚合函数:求最大值,最小值,平均值,求和(返回的都是一行一列的集合)
      - max/,min:求最大值/最小值
      e.g. 
      select max(balance) from acct;

      - avg:求平均值
      统计存款平均值
      e.g. 
      select avg(balance) from acct;

      - sum:对字段求和
      求所有账户余额之和
      e.g. 
      select sum(balance) from acct;

      - count:统计笔数
      统计账户数量
      e.g. 
      select count(*) from acct;
      注:count后的括号中可以跟字段、数字, 但是如果跟的字段,当字段为null则不统计

    4)group by子句
      - 作用: 对查询结果进行分组,通常和聚合函数配合使用
      - 格式: group by分组字段名称
      - 示例: 
        e.g. 统计各种状态数量
        select count(*) '数量',acct_type '账户类型'
        from acct
        group by acct_type;
            +--------+--------------+
            | 数量   | 账户类型       |
            +--------+--------------+
            |      1 |         NULL |
            |      7 |            1 |
            +--------+--------------+

        e.g. 统计各类账户余额的最大值
        select acct_type '账户类型', max(balance) '最大余额'
        from acct
        group by acct_type;
            +--------------+--------------+
            | 账户类型      | 最大余额       |
            +--------------+--------------+
            |         NULL |         NULL |
            |            1 |     11000.00 |
            +--------------+--------------+

    5)having子句
      - 作用: 对分组聚合的结果进行筛选
             需要和group by 子句配合使用
      - 格式: group by 分组字段 having 过滤条件
      - 示例: 统计各类账户余额总和,不显示余额为null的数据
      select acct_type '账户类型', sum(balance) '总余额'
        from acct
            -- where acct_type in(1,2,3,4)
        group by acct_type
        having acct_type is not null;
            +--------------+-----------+
            | 账户类型      | 总余额     |
            +--------------+-----------+
            |            1 |  38500.00 |
            +--------------+-----------+
    
    - SQL语句的执行顺序(难点)
      第一步: from acct
            首先执行from,找到数据源

      第二步: where 条件过滤
            选出所有满足条件的数据

      第三步: group by子句
            先分组

      第四步: sum(balance), acct_type
            按照分组,对每组进行统计

      第五步: having acct_type is not null
            把聚合以后不满足条件的数据过滤掉

      第六步: order by acct_type desc
            按照统计结果排序

      第七步: limit 1
            限定显示的笔数
    - 补充说明: having子句只能对group by的结果进行过滤
               where 只能限定表中实际存在的字段,一般位于from后
    
    6)distinct子句
      - 作用: 对某个字段进行去重
      - 格式: select distinct(字段名称) from 表名称
      - 示例:
        e.g. 查看账户表中一共有多少种账户类型
        select distinct(acct_type) from acct where acct_type is not null;

5.表结构调整(alter table)
  1)添加字段
    - 添加到最后一个字段
      alter table 表名称 add 字段名称 类型(长度)
    - 添加到第一个字段
      alter table 表名称 add 字段名称 类型(长度) first
    - 添加到指定位置
      alter table 表名称 add 字段名称 类型(长度) after 字段
    - 示例:
      create table student(
          stu_no varchar(32),
          stu_name varchar(64)
      );
      alter table student add age int; -- 添加到最后
      alter table student add id int first; -- 添加到最前
      alter table student add tel_no varchar(32) after stu_name; -- 添加到指定位置
  2)修改字段
    - 修改字段的类型
      alter table 表名 modify 字段名 类型(长度)
    - 修改字段名称
      alter table 表名
      change 旧字段名 新字段名 类型(宽度)
    - 示例:
    e.g. 将stu_name字段的长度改为128
      alter table student modify stu_name varchar(128);
    e.g. 将age字段改为stu_age
      alter table student change age stu_age int;
  3)删除字段
    - 语法: alter table 表名称 drop 字段名
    - 示例: 删除id字段
            alter table student drop id;

练习:
1.创建一个库eshop,并指定编码为utf-8
2.创建订单表(order, utf-8编码),包含如下字段:
    order_id  订单编号,字符串,32字节
    cust_id   客户编号,字符串,32字节
    order_date 下单时间,DateTime类型
    status    订单状态,枚举类型,取值范围
              ('1','2','3','4','5','6','9')
              1-待付款   2-待发货
              3-已发货   4-已收货
              5-申请退货  6-以退货
              9-已废弃
    product_num 订单包含的商品数量
    amt       订单金额,浮点数,两位小数
3.至少插入5笔数据(要求数据库看上去尽量真实)
4.编写11个sql语句
  1)查找所有的待付款订单
  2)查找所有已发货、已收货、申请退货订单
  3)查找某个客户的待发货订单
  4)根据订单编号,查找订单下单日期,订单状态
  5)查找某个客户的所有订单,并按照下单时间倒序排列
  6)统计每种状态的订单笔数
  7)查询单笔订单的最大值/最小值/平均值,所有订单的总金额
  8)查询金额最大的前3笔订单
  9)在表的最后添加两个字段:
    invoice  开票状态,整数
    invoice_date 开票时间,DateTime类型
  10)修改某个订单状态为"已收货"
  11)删除已废弃的订单

  