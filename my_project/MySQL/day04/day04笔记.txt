上次回顾:
1.约束(constraint)
  1)数据库层级对数据添加的规则,维护数据的一致性完整性正确性
  2)约束的类型:非空、唯一性、主键、默认值、自动增加、
             外键约束
2.索引
  1)提高查询效率的技术,通过避免全表扫描提高查询效率
  2)优缺点:
    - 优点: 提高查询效率
    - 缺点: 增加额外的存储空间, 降低增删改的效率 
  3)索引使用的注意事项:
    - 使用恰当的索引,不是越多越好
    - 适合使用索引的情况
      经常查询的字段
      数据相对较为连续、均匀的字段适合建索引
    - 不适合建立索引的情况
      经常不查询的字段
      字段的值较少
      表的数据量很少
      二进制格式的字段
3.导入导出
  导出: select * from acct
       into outfile '文件路径' -- secure_file_priv
       fields terminated by '字段分隔符'
       lines terminated by '行分隔符'
  导出: load data infile '文件路径'
        into table '表名'
        fields terminated by '字段分隔符'
        lines terminated by '行分隔符'
4.表的复制、重命名
  1)create table 表名称 查询语句
  2)alter table 原表名称 rename to 新表名称


今天的内容:
1.子查询(一个查询中,包含另一个查询)(重点)
2.连接查询(两个或多个表中,查询返回一个结果)(重点)
3.权限管理
4.数据库事务(重点)

1.子查询
  1)什么是子查询:查询语句中包含另一个查询,也叫嵌套查询
    例如: 现在要查询发生过交易的账户信息
      select * from acct where acct_no in(  -- 外层查询
          select distinct(acct_no) from acct_trans_detail
      );
    说明: 括号中的部分称之为子查询
        先执行子查询,返回一个结果集,再执行外层查询
        子查询返回的结果,要和外层查询的条件匹配
        子查询只执行一次
  2)什么情况下使用子查询:
    - 一个查询语句无法实习的时候
    - 一个查询语句实现不方便、不直观
  3)单表子查询:
    - 示例: 
      查询所有余额大于平均余额的账户
      select * from acct where balance >(
          select avg(balance) from acct
      );
  4)多表子查询
    - 示例1: 查询所有发生过交易的账户信息
    select * from acct where acct_no in (
        select distinct acct_no from acct_trans_detail
    );
    - 示例2: 查询所有未发生过交易的账户信息
    select * from where acct_no not in(
        select distinct acct_no from acct_trans_detail
    );
    - 示例3: 查询所有发生过大金额交易的账户信息,先通过子查询出发生10万以上交易的账户,再通过外层查询账户信息 
    select * from acct where acct_no in(
        select distinct acct_no
          from acct_trans_detail
          where amt > 100000
    );
2.连接查询(联合查询)
  1)笛卡尔积
    - 定义: 两个集合乘积,每个集合中的元素两两组合产生新的集合
    - 意义: 表示两个集合所有可能的情况组合
      A: 学生集合
      B: 课程集合
      A和B的笛卡尔积表示所有学生选课的情况

      A: 声母
      B: 韵母
      A和B的笛卡尔积表示所有可能的拼音组合
    - 笛卡尔积和关系的关系:(二维表)
      笛卡尔积中可能含有不存在(没有实际意义)数据,去掉这部分数据就是关系
      例如: bun在汉语拼音中不存在
  2)连接查询
    - 什么是连接查询: 
      将两个或两个以上的表连接起来得到一个新表(也叫表的连接)
    - 什么时候使用连接查询: 当从一个表中无法获得所有想要的数据的时候,使用联合查询
      (前提是两个表的数据有关联关系)
    - 示例: 
      select a.acct_no, a.acct_name, c.tel_no
      from acct a, customer c;   -- 未作条件关联, 得到笛卡尔积
      where a.cust_no = c.cust_no; -- 连接的条件
    *通过字段关联,如果关联到数据则显示
     如果未关联到数据,则不显示
     这种连接查询称之为内连接
  3)连接分类
    - 内连接: 关联到的数据显示,没关联到的数据不显示
      select 字段列表 from 表A inner join 表B on 关联条件
      示例: select a.acct_no, a.acct_name, c.tel_no 
      from acct a
      inner join customer c
      on a.cust_no = c.cust_no;
    - 外连接: 没有关联到的数据也显示
             (指定哪个表的数据全部显示)
      左连接: 左表为主,右表匹配
      左连接格式:
        select 字段列表 from 表A
        left join 表B
        on 关联条件
      示例: 查询账户、户名、客户电话、如果账户对应的客户不存在，也要显示账户、户名
        select a.acct_no, a.acct_name, c.tel_no
        from acct a
        left join customer c
        on a.cust_no = c.cust_no;

      右连接: 右表为主,左表匹配
      右连接格式:
        select 字段列表 from 表A
        right join 表B
        on 关联条件
      示例： 
        select a.acct_no, a.acct_name, c.tel_no
        from acct a
        right join customer c
        on a.cust_no = c.cust_no;
3.权限管理(难点)
  1)权限: 规定用户可以进行哪些操作
  2)分类:
     - 用户类: 创建用户、删除用户、给用户授权
     - 库操作： 创建库、删除库
     - 表操作： 创建表、删除表
     - 数据操作： 增、删、改、查
  3)权限表
    - user: 最重要的权限表,记录了允许连接到服务器的用户及具有的权限
    - db: 记录库的授权信息
    - tables_priv: 记录表的授权信息
    - columns_priv: 记录字段的授权信息
  4)授权
    - 语法:
      grant 权限列表 on 库名称.表名称
      to '用户名'@'客户端地址'
      [identified by '密码']
      [with grant option]
    - 说明:
      权限列表: 被授权用户拥有哪些权限
        all privileges: 所有权限
        select, insert, update, delete: 分别制定权限
    - 库名称.表名
      *.*  表示为所有库的所有表
      bank.* 表示bank下的所有表
      bank.acct 表示bank下的acct表
    - 客户端地址
      % 表示所有的客户端
      localhost 表示本机
      192.168.1.5 表示指定192.168.1.5这台机器
    - 示例:
      示例1: 给Daniel用户授予所有库、所有表的所有权限
            并将密码设置为'123456'
            允许用户向其他用户授权
        grant all privileges on *.*
        to 'Daniel'@'%' 
        identified by '123456'
        with grant option;
      执行成功后,重新加载权限设置:
      flush privileges;
      重使用Daniel用户登录验证:
      mysql -uDaniel -p123456
      示例2: 给Tom用户授权,能对所有库、所有表进行查询,限定只能从本机登录,并将密码设置为'123456'
      grant select on *.*
      to 'Tom'@'localhost'
      identified by '123456';

      执行成功,刷新权限
      重新用Tom用户登陆,执行查询(成功),执行插入(拒绝),建表(拒绝)
    
    给用户Jerry授权,只能访问bank库下的表,能够对该库的所有表增,删,改,查
    可以从任意客户端登陆
        grant insert,select,update,delete on bank.*
        to 'Jerry'@'%'
        identified by '123456';
    
    查看自己的权限
        show grants;

    查看别人的权限:
        show grants for 'Tom'@'localhost';
  5)吊销权限
    - 语法: revoke 权限列表 on 库名.表名
           from '用户'@'客户端地址'
    - 示例:
      吊销Jerry用户的bank库下的delete权限
  最小权限原则
4.数据库事务(重点)
  1)什么是事务(Transaction): 数据库的一系列操作
    要么全都执行,要么全都不执行
  2)作用: 保证数据一致性, 正确性
  例如: 0001账户向0002账户转钱1000元
       0001 减去1000元
       0002 加上1000元
       以上两个操作要么全执行,要么全都不执行
  3)使用事务的场合
    - 对数据进行修改
    - 如果修改成功,则提交事物,若失败则回滚
  4)MySQL中,启用事务的表必须是InnoDB存储引擎
  5)事务的特征: ACID特性
    - 原子性(Atomicity)
      事务是一个整体,要么全都执行,要么全都不执行
    - 一致性(Consistency)
      事务执行完成后,从一个一致性状态变成另一个一致性状态
    - 隔离性(Isolation) 
      多个事务之间不产生影响干扰
    - 持久性(Durability)
      事务一旦提交,对数据库的修改必须持久保存
  6)MySQL中操作事务
    - 启动: start transaction
    - 提交: commit
    - 回滚: rollback
    示例: 利用事务控制转账的操作
    第一步: 开始事务
      start transaction
    第二步: 修改转出账户余额
      update acct set balance = balance - 100
        where acct_no = '622345000001';
    第三步: 修改转入账户余额
      update acct set balance = balance + 100
        where acct_no = '622345000002';
    第四步:提交
      commit;
    第一次, 四个步骤全执行
    第二次, 前两个步骤,然后rollback

课堂练习:
使用eshop库, 完成如下操作:
1.利用子查询,查询所有订单状态为"申请退货"的客户名称、电话号码
2.利用连接查询， 查询"待送货"订单的信息
  查询结果包含的字段有:
    订单编号 下单时间 客户编号 客户电话 送货地址
3.创建eshop_admin用户,并授权:
  1)eshop库的所有表、所有权限
  2)允许从任意客户端登录
  3)设置密码
4.创建eshop_user用户,并授权:
  1)eshop库中所有表的查询权限
  2)允许从任意客户端登录
  3)设置密码
